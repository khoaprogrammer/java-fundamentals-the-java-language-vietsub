1
00:00:02,000 --> 00:00:04,000
Constructors are not the only way to run code

2
00:00:04,000 --> 00:00:06,000
as part of the initialization of our classes.

3
00:00:06,000 --> 00:00:09,000
We have another mechanism called "Initialization Blocks".

4
00:00:09,000 --> 00:00:11,000
What they allow us to do is create code

5
00:00:11,000 --> 00:00:14,000
that is shared across all our constructors.

6
00:00:14,000 --> 00:00:17,000
What they do is they run the code as if that code

7
00:00:17,000 --> 00:00:21,000
were placed at the very beginning of each constructor.

8
00:00:21,000 --> 00:00:23,000
Let's revisit our flight class for a second.

9
00:00:23,000 --> 00:00:26,000
Remember that our flight class has some fields in it,

10
00:00:26,000 --> 00:00:29,000
we know that we have that "passenger fields".

11
00:00:29,000 --> 00:00:31,000
Going to have a look at another field here,

12
00:00:31,000 --> 00:00:33,000
called "flight number" we'll talk about the second

13
00:00:33,000 --> 00:00:35,000
that I've added and of course we have our "seats" field.

14
00:00:35,000 --> 00:00:37,000
I'm going to choose another new field here

15
00:00:37,000 --> 00:00:40,000
called "flight class", and the idea is that "flight number"

16
00:00:40,000 --> 00:00:42,000
and "flight class" are two different ways

17
00:00:42,000 --> 00:00:44,000
to identify a flight, so a flight is either created with

18
00:00:44,000 --> 00:00:48,000
an individual number or it's created with an individual

19
00:00:48,000 --> 00:00:51,000
character as a flight class that I group it somehow.

20
00:00:51,000 --> 00:00:54,000
Remember that constructor that we wrote earlier.

21
00:00:54,000 --> 00:00:57,000
It took no arguments and it set seats to 150

22
00:00:57,000 --> 00:00:59,000
and our passengers were set to zero.

23
00:00:59,000 --> 00:01:01,000
We've learned a lot since we've originally wrote

24
00:01:01,000 --> 00:01:03,000
this constructor.

25
00:01:03,000 --> 00:01:06,000
We know that passengers will automatically be set to zero

26
00:01:06,000 --> 00:01:08,000
so we don't need to have that code here.

27
00:01:08,000 --> 00:01:10,000
We also know that we can initialize that we added

28
00:01:10,000 --> 00:01:12,000
the "seats field" right up there in the declaration.

29
00:01:12,000 --> 00:01:14,000
Let's go and move that up there and we no longer

30
00:01:14,000 --> 00:01:17,000
need it inside of our constructor.

31
00:01:17,000 --> 00:01:19,000
Now, let's add two more constructors.

32
00:01:19,000 --> 00:01:22,000
One that accepts our flight number.

33
00:01:22,000 --> 00:01:23,000
We'll go ahead and initialize that.

34
00:01:23,000 --> 00:01:27,000
Another one accepts our flight class and that initializes

35
00:01:27,000 --> 00:01:29,000
to "flight class" field.

36
00:01:29,000 --> 00:01:31,000
As we're enhancing our class, let's go one step further,

37
00:01:31,000 --> 00:01:33,000
in addition to having these different ways

38
00:01:33,000 --> 00:01:35,000
to identify our flights, let's keep track of the seats

39
00:01:35,000 --> 00:01:36,000
a little more closely.

40
00:01:36,000 --> 00:01:38,000
Right now, all we have is the ability to have

41
00:01:38,000 --> 00:01:42,000
the number of seats, earlier we just kept count of how many

42
00:01:42,000 --> 00:01:43,000
passengers we had.

43
00:01:43,000 --> 00:01:46,000
Let's go and advance this a little bit and say,

44
00:01:46,000 --> 00:01:49,000
let's keep track if each individual seat is available.

45
00:01:49,000 --> 00:01:52,000
We've got this new array here, "is seat available"

46
00:01:52,000 --> 00:01:53,000
that's an array of Boolean.

47
00:01:53,000 --> 00:01:57,000
If we just declare this array of Boolean, all the values

48
00:01:57,000 --> 00:01:59,000
are going to "false".

49
00:01:59,000 --> 00:02:02,000
We, of course don't want to have all the seats available

50
00:02:02,000 --> 00:02:03,000
set to "false", that would imply

51
00:02:03,000 --> 00:02:06,000
that they were unavailable, we want them to be available

52
00:02:06,000 --> 00:02:07,000
or set to "true".

53
00:02:07,000 --> 00:02:10,000
Now, based on what we know so far, a way we would do that

54
00:02:10,000 --> 00:02:14,000
is we'd go to our no-argument constructor here,

55
00:02:14,000 --> 00:02:17,000
we would go ahead and allocate up the array

56
00:02:17,000 --> 00:02:20,000
for "is seat available", what we would do is loop through

57
00:02:20,000 --> 00:02:23,000
each one and then set each one to true.

58
00:02:23,000 --> 00:02:24,000
That's a reasonable thing to do.

59
00:02:24,000 --> 00:02:26,000
What it would do, of course is that each

60
00:02:26,000 --> 00:02:29,000
of the other constructors, we would call up to that

61
00:02:29,000 --> 00:02:33,000
constructor, so our constructor based on flight number

62
00:02:33,000 --> 00:02:35,000
and our constructor based on flight class would both

63
00:02:35,000 --> 00:02:38,000
call up to the no-argument constructor.

64
00:02:38,000 --> 00:02:41,000
That's a reasonable thing to do, but in cases like this

65
00:02:41,000 --> 00:02:43,000
where we have code that we want to share across

66
00:02:43,000 --> 00:02:45,000
all the constructors, that's a perfect place to use

67
00:02:45,000 --> 00:02:47,000
initialization blocks.

68
00:02:47,000 --> 00:02:50,000
All we have to do is take that code that we want to share

69
00:02:50,000 --> 00:02:53,000
and place it within brackets outside

70
00:02:53,000 --> 00:02:55,000
of any method or constructor.

71
00:02:55,000 --> 00:02:58,000
Let's take our no-argument constructor and take all the code

72
00:02:58,000 --> 00:03:00,000
out of it and we'll move it down,

73
00:03:00,000 --> 00:03:03,000
so now it has no actual code inside of it.

74
00:03:03,000 --> 00:03:05,000
We'll take that code we want to run

75
00:03:05,000 --> 00:03:08,000
and wrap that in brackets.

76
00:03:08,000 --> 00:03:10,000
Notice there is no constructor name here,

77
00:03:10,000 --> 00:03:12,000
there is no method name,

78
00:03:12,000 --> 00:03:14,000
it's just the brackets and the code.

79
00:03:14,000 --> 00:03:18,000
That turns that code into an initialization block.

80
00:03:18,000 --> 00:03:21,000
It will automatically be executed at the beginning

81
00:03:21,000 --> 00:03:22,000
of each one of our constructors.

82
00:03:22,000 --> 00:03:25,000
Our flight number-based constructor no longer

83
00:03:25,000 --> 00:03:27,000
needs to chain up to another constructor

84
00:03:27,000 --> 00:03:30,000
as well as our flight class constructor.

85
00:03:30,000 --> 00:03:33,000
No matter how someone creates this class now,

86
00:03:33,000 --> 00:03:35,000
the code to set up "is seat available"

87
00:03:35,000 --> 00:03:38,000
will always run because it's in that initialization block.

88
00:03:38,000 --> 00:03:41,000
It's a great way to share that code across constructors,

89
00:03:41,000 --> 00:03:42,000
it's really useful in something we're going to talk

90
00:03:42,000 --> 00:03:45,000
about later called "anonymous classes".

91
00:03:45,000 --> 00:03:47,000
Another thing just to note, is that you can put multiple

92
00:03:47,000 --> 00:03:50,000
initialization blocks in a class, they are executed

93
00:03:50,000 --> 00:03:52,000
in the order they are encountered from the top.

94
00:03:52,000 --> 00:03:54,000
I would be really careful about that

95
00:03:54,000 --> 00:03:55,000
because that's really easy to get out of hand,

96
00:03:55,000 --> 00:59:00,000
it's just something to be aware of.

