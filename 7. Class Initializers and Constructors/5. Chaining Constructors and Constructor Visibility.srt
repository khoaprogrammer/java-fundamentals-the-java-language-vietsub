1
00:00:01,000 --> 00:00:05,000
Looking at our passenger class, what I want to focus you on,

2
00:00:05,000 --> 00:00:07,000
is just the constructors for a second, so we'll assume

3
00:00:07,000 --> 00:00:09,000
we have all the fields and methods we saw

4
00:00:09,000 --> 00:00:10,000
on the earlier slides.

5
00:00:10,000 --> 00:00:13,000
Remember that we have a constructor that takes no arguments,

6
00:00:13,000 --> 00:00:16,000
we also have our constructor that accepts an integer

7
00:00:16,000 --> 00:00:18,000
which is the number of free bags that we set

8
00:00:18,000 --> 00:00:20,000
and of course, that allows us to go out here

9
00:00:20,000 --> 00:00:23,000
and do something like create a reference called Jane

10
00:00:23,000 --> 00:00:25,000
to a new passenger and when we create,

11
00:00:25,000 --> 00:00:27,000
we say that Jane is allowed to have two free bags.

12
00:00:27,000 --> 00:00:29,000
The we can call the method "check bags",

13
00:00:29,000 --> 00:00:31,000
to set how many bags she's checked.

14
00:00:31,000 --> 00:00:34,000
If we find this as a scenario that comes up a lot,

15
00:00:34,000 --> 00:00:37,000
where we create a passenger who has a number of free bags

16
00:00:37,000 --> 00:00:40,000
and a number of checked bags, it might make sense

17
00:00:40,000 --> 00:00:42,000
to introduce another constructor that allows us to combine

18
00:00:42,000 --> 00:00:45,000
those operations, so we can go and create a passenger

19
00:00:45,000 --> 00:00:48,000
and in one call, say that they can have two free bags

20
00:00:48,000 --> 00:00:51,000
and they've checked three bags.

21
00:00:51,000 --> 00:00:53,000
Writing a constructor like that is really straightforward,

22
00:00:53,000 --> 00:00:56,000
now we just introduce another public passenger

23
00:00:56,000 --> 00:00:58,000
with two integer arguments, one for free bags,

24
00:00:58,000 --> 00:00:59,000
one for checked bags.

25
00:00:59,000 --> 00:01:02,000
While we can write this, again we just make the assignments,

26
00:01:02,000 --> 00:01:06,000
we assign free bags into the field "free bags",

27
00:01:06,000 --> 00:01:09,000
we assign checked bags into the field "checked bags".

28
00:01:09,000 --> 00:01:12,000
That would work, the thing is that now we're getting

29
00:01:12,000 --> 00:01:15,000
some duplicate logic, that assignment of free bags

30
00:01:15,000 --> 00:01:18,000
is now happening in two separate constructors.

31
00:01:18,000 --> 00:01:21,000
In this case, that logic is really simple,

32
00:01:21,000 --> 00:01:24,000
but if times goes on and the logic around the management

33
00:01:24,000 --> 00:01:26,000
of free bags gets more sophisticated, we would actually

34
00:01:26,000 --> 00:01:28,000
have to change it in every place that we have currently

35
00:01:28,000 --> 00:01:30,000
assigned free bags.

36
00:01:30,000 --> 00:01:33,000
It would be nice to be able to chain these constructors

37
00:01:33,000 --> 00:01:35,000
together, and in turns out we can do that.

38
00:01:35,000 --> 00:01:39,000
One constructor is allowed to call another constructor.

39
00:01:39,000 --> 00:01:42,000
All we do, is use this keyword followed

40
00:01:42,000 --> 00:01:43,000
by the parameter list.

41
00:01:43,000 --> 00:01:45,000
If we look at the constructor that takes free bags

42
00:01:45,000 --> 00:01:49,000
and checked bags, that line where we assign free bags,

43
00:01:49,000 --> 00:01:52,000
we can replace that with this

44
00:01:52,000 --> 00:01:54,000
and then our free bags parameter.

45
00:01:54,000 --> 00:01:58,000
What that will do is then call into the constructors that

46
00:01:58,000 --> 00:01:59,000
accepts the single integer free bags

47
00:01:59,000 --> 00:02:01,000
and run that constructor.

48
00:02:01,000 --> 00:02:04,000
The one qualifier is, the call to the other constructor

49
00:02:04,000 --> 00:02:07,000
has to be the first line in our constructor.

50
00:02:07,000 --> 00:02:09,000
Now, when we create this passenger Jane,

51
00:02:09,000 --> 00:02:12,000
it calls into the constructor that takes two arguments

52
00:02:12,000 --> 00:02:14,000
as part of that calls up to the constructor that takes

53
00:02:14,000 --> 00:02:16,000
one argument which sets to free bags,

54
00:02:16,000 --> 00:02:18,000
and when that returns, we assign checked bags

55
00:02:18,000 --> 00:02:21,000
into our checked bags field.

56
00:02:21,000 --> 00:02:23,000
With multiple constructors, we may want to start thinking

57
00:02:23,000 --> 00:02:25,000
about the visibility of our constructors.

58
00:02:25,000 --> 00:02:28,000
Because, just like any other members, with constructors

59
00:02:28,000 --> 00:02:31,000
we can use access modifiers to control the visibility

60
00:02:31,000 --> 00:02:33,000
of those constructors.

61
00:02:33,000 --> 00:02:35,000
What that allows us to do is limit what code

62
00:02:35,000 --> 00:02:38,000
can perform specific creations, let's see that

63
00:02:38,000 --> 00:02:40,000
on an example here.

64
00:02:40,000 --> 00:02:43,000
Let's say that we introduce a constructor that allows us

65
00:02:43,000 --> 00:02:46,000
to identify the "per bag" fee for passengers.

66
00:02:46,000 --> 00:02:49,000
Of course, all that does is assign whatever

67
00:02:49,000 --> 00:02:52,000
that parameter is into our per bag fee field.

68
00:02:52,000 --> 00:02:56,000
Thinking about it is that if the logic around

69
00:02:56,000 --> 00:02:59,000
setting back fees is kind of meant to be part of our class,

70
00:02:59,000 --> 00:03:01,000
we probably don't want a program to easily go

71
00:03:01,000 --> 00:03:04,000
and change that, we don't' want to cheap Joe to come along

72
00:03:04,000 --> 00:03:06,000
and just create himself as a passenger where he pays

73
00:03:06,000 --> 00:03:08,000
a penny a bag.

74
00:03:08,000 --> 00:03:10,000
We probably don't want that broadly accessible,

75
00:03:10,000 --> 00:03:14,000
what we do here is that for our constructor

76
00:03:14,000 --> 00:03:16,000
that accepts the baggage fee, instead of being public,

77
00:03:16,000 --> 00:03:18,000
go and make that guy private.

78
00:03:18,000 --> 00:03:21,000
By making it private, it can't be called from the outside,

79
00:03:21,000 --> 00:03:24,000
it can only be called from within our class.

80
00:03:24,000 --> 00:03:26,000
Maybe, what we want to do here is say that

81
00:03:26,000 --> 00:03:30,000
based on the number of free bags a passenger is allowed

82
00:03:30,000 --> 00:03:32,000
to have, we will set the baggage fee.

83
00:03:32,000 --> 00:03:35,000
The idea being that a passenger is assigned a certain number

84
00:03:35,000 --> 00:03:38,000
of free bags based on the level of customer they are,

85
00:03:38,000 --> 00:03:40,000
so a customer who is actually allowed

86
00:03:40,000 --> 00:03:42,000
more free bags may also as part of that get a lower

87
00:03:42,000 --> 00:03:45,000
"per bag rate" for the ones that they have to pay for.

88
00:03:45,000 --> 00:03:48,000
If we look at our constructor here that accepts free bags,

89
00:03:48,000 --> 00:03:51,000
we make a little room in here, maybe what we want to do

90
00:03:51,000 --> 00:03:54,000
is make a call down to the other constructor

91
00:03:54,000 --> 00:03:58,000
based on the baggage fees and pass in a different value

92
00:03:58,000 --> 00:04:00,000
based on the number of free bags the customer has.

93
00:04:00,000 --> 00:04:03,000
We can do here, is call out to that and say if free bags

94
00:04:03,000 --> 00:04:06,000
is greater than one, they pay 25 $ per a bag

95
00:04:06,000 --> 00:04:09,000
depending on the free bags, otherwise they pay 50 $.

96
00:04:09,000 --> 00:04:12,000
The idea being that a customer who gets more free bags

97
00:04:12,000 --> 00:04:15,000
also gets a discount rate on bags they pay for.

98
00:04:15,000 --> 00:04:19,000
What that allows us to do now is have our baggage fee rate

99
00:04:19,000 --> 00:04:22,000
tied to the number of free bags a passenger gets.

100
00:04:22,000 --> 00:04:25,000
If we have one call here, where we create a passenger Fred

101
00:04:25,000 --> 00:04:28,000
who gets two free bags, that goes directly

102
00:04:28,000 --> 00:04:31,000
to the constructor that accepts the free bags parameter,

103
00:04:31,000 --> 00:04:34,000
as part of that, it's chained down to the constructor

104
00:04:34,000 --> 00:04:36,000
that sets the baggage fee.

105
00:04:36,000 --> 00:04:39,000
We have another passenger created who accepts

106
00:04:39,000 --> 00:04:43,000
the two parameters, the free bags and the checked bags.

107
00:04:43,000 --> 00:04:46,000
We'll call in the first, that constructor, that constructor

108
00:04:46,000 --> 00:04:48,000
will chain up to our constructor that accepts

109
00:04:48,000 --> 00:04:51,000
the number of free bags which then in turn

110
00:04:51,000 --> 00:59:00,000
chains down to the constructor that sets the baggage fee.

