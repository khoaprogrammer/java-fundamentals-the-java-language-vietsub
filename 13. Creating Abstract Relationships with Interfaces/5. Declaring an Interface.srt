1
00:00:01,000 --> 00:00:02,000
Up until now, we've been looking

2
00:00:02,000 --> 00:00:05,000
at implementing existing interfaces,

3
00:00:05,000 --> 00:00:07,000
but we can also declare our own interfaces.

4
00:00:07,000 --> 00:00:09,000
Now, declaring an interface is

5
00:00:09,000 --> 00:00:11,000
very similar to declaring a class.

6
00:00:11,000 --> 00:00:15,000
You use the interface keyword to define an interface.

7
00:00:15,000 --> 00:00:17,000
Now interfaces support a subset

8
00:00:17,000 --> 00:00:20,000
of the features that are available to classes.

9
00:00:20,000 --> 00:00:22,000
Interfaces can have methods, but when

10
00:00:22,000 --> 00:00:24,000
we provide the methods to an interface,

11
00:00:24,000 --> 00:00:26,000
we simply list the method name,

12
00:00:26,000 --> 00:00:29,000
its parameters, and its return type.

13
00:00:29,000 --> 00:00:32,000
Remember that interfaces do not have an implementation,

14
00:00:32,000 --> 00:00:34,000
right, they're just defining a contract.

15
00:00:34,000 --> 00:00:37,000
Now the methods of an interface are implicitly public.

16
00:00:37,000 --> 00:00:40,000
Now, interfaces can also have constants,

17
00:00:40,000 --> 00:00:42,000
and basically we're just saying that

18
00:00:42,000 --> 00:00:45,000
that is a typed named value.

19
00:00:45,000 --> 00:00:47,000
Now the constants we put on an interface

20
00:00:47,000 --> 00:00:51,000
are always considered public, final, and static.

21
00:00:51,000 --> 00:00:53,000
We don't have to use those keywords,

22
00:00:53,000 --> 00:00:54,000
but they're treated that way.

23
00:00:54,000 --> 00:00:56,000
What that means is that

24
00:00:56,000 --> 00:00:58,000
any constant you associate with an interface

25
00:00:58,000 --> 00:01:01,000
has the same value for implementers of the interface,

26
00:01:01,000 --> 00:01:05,000
there's no concept of a per-instance constant

27
00:01:05,000 --> 00:01:07,000
in interfaces, right, it's always interface-wide,

28
00:01:07,000 --> 00:01:10,000
or true for all implementers of that interface.

29
00:01:10,000 --> 00:01:13,000
Also, interfaces can be extended.

30
00:01:13,000 --> 00:01:17,000
One interface can extend another interface.

31
00:01:17,000 --> 00:01:19,000
What that means, of course, is that it can

32
00:01:19,000 --> 00:01:22,000
add additional methods and constants to it.

33
00:01:22,000 --> 00:01:24,000
So in a way that you can extend classes,

34
00:01:24,000 --> 00:01:26,000
one interface can extend another.

35
00:01:26,000 --> 00:01:27,000
And what's neat about that is that,

36
00:01:27,000 --> 00:01:28,000
when you extend an interface,

37
00:01:28,000 --> 00:01:31,000
you're kind of adding an additional contract to it.

38
00:01:31,000 --> 00:01:33,000
So any class that implements

39
00:01:33,000 --> 00:01:36,000
an interface that extends another interface

40
00:01:36,000 --> 00:01:38,000
is automatically considered

41
00:01:38,000 --> 00:01:41,000
to implement the base interface.

42
00:01:41,000 --> 00:01:45,000
In our next clip, let's take a look at declaring our own interface inside

43
00:01:45,000 --> 00:01:47,000
of our CalcEngine program, and what it's like

44
00:01:47,000 --> 00:59:00,000
to work with that interface once we declare it.

