1
00:00:02,000 --> 00:00:04,000
So we have this interface, MathProcessing,

2
00:00:04,000 --> 00:00:07,000
that models a concept of a class

3
00:00:07,000 --> 00:00:10,000
being able to identify a keyword it operates on,

4
00:00:10,000 --> 00:00:12,000
do the operation, and tell us what symbol

5
00:00:12,000 --> 00:00:14,000
to use when producing the output.

6
00:00:14,000 --> 00:00:16,000
Adder implements it, what we want to do now

7
00:00:16,000 --> 00:00:18,000
is write a class that does that same work

8
00:00:18,000 --> 00:00:20,000
that CalculateHelper did but do it

9
00:00:20,000 --> 00:00:23,000
in terms of handlers that implement the interface

10
00:00:23,000 --> 00:00:25,000
rather than a set of hardcoded operations.

11
00:00:25,000 --> 00:00:27,000
So let's go ahead and add another class to our project,

12
00:00:27,000 --> 00:00:31,000
we'll call this our DynamicHelper.

13
00:00:31,000 --> 00:00:33,000
So we have our DynamicHelper class,

14
00:00:33,000 --> 00:00:37,000
and what we'll do is store a list of handlers,

15
00:00:37,000 --> 00:00:39,000
so we'll do that as an array.

16
00:00:39,000 --> 00:00:41,000
So I'll declare an array here

17
00:00:41,000 --> 00:00:43,000
of type MathProcessing called handlers.

18
00:00:43,000 --> 00:00:45,000
So that'll be the list of handlers that a given

19
00:00:45,000 --> 00:00:48,000
instance of DynamicHelper has access to.

20
00:00:48,000 --> 00:00:50,000
We'll then have the constructor accept an array

21
00:00:50,000 --> 00:00:53,000
of handlers and store it inside of our class variable.

22
00:00:53,000 --> 00:00:56,000
So whenever we create an instance of this class,

23
00:00:56,000 --> 00:00:58,000
we just pass in that array that contains

24
00:00:58,000 --> 00:01:00,000
all the handlers we want to use.

25
00:01:00,000 --> 00:01:02,000
And then from there, we'll add a method called process

26
00:01:02,000 --> 00:01:05,000
that accepts a string statement to operate on

27
00:01:05,000 --> 00:01:08,000
and returns back a string result.

28
00:01:08,000 --> 00:01:10,000
Right, so the idea is that what would come in

29
00:01:10,000 --> 00:01:14,000
would be something like "add 1.0 2.0"

30
00:01:14,000 --> 00:01:16,000
and then what goes out would be

31
00:01:16,000 --> 00:01:18,000
the traditional math representation

32
00:01:18,000 --> 00:01:20,000
of that, showing the result.

33
00:01:20,000 --> 00:01:22,000
So the same work we did earlier in CalculateHelper,

34
00:01:22,000 --> 00:01:24,000
but again, we're doing it

35
00:01:24,000 --> 00:01:25,000
this time in terms of the interface.

36
00:01:25,000 --> 00:01:27,000
Now we still have to do some of the basic work,

37
00:01:27,000 --> 00:01:28,000
like one of the things we have to do

38
00:01:28,000 --> 00:01:32,000
is split the statement up using the string split method.

39
00:01:32,000 --> 00:01:34,000
So when we split it, we'll use the constant that was defined

40
00:01:34,000 --> 00:01:38,000
on our MathProcessing interface called SEPARATOR,

41
00:01:38,000 --> 00:01:40,000
and that constant was a space,

42
00:01:40,000 --> 00:01:42,000
we're still going to go ahead and split it based on a space.

43
00:01:42,000 --> 00:01:43,000
And then of course our keyword

44
00:01:43,000 --> 00:01:46,000
is the very first part of the statement.

45
00:01:46,000 --> 00:01:47,000
So in this case, that might

46
00:01:47,000 --> 00:01:49,000
be something like the add keyword.

47
00:01:49,000 --> 00:01:51,000
So now, what we need to do

48
00:01:51,000 --> 00:01:52,000
is loop through the handlers to find

49
00:01:52,000 --> 00:01:55,000
the handler that knows how to handle add.

50
00:01:55,000 --> 00:01:56,000
So what I'll do here is I'll first of all

51
00:01:56,000 --> 00:01:58,000
declare a local variable called

52
00:01:58,000 --> 00:02:00,000
theHandler of type MathProcessing,

53
00:02:00,000 --> 00:02:02,000
and then what I want do now is

54
00:02:02,000 --> 00:02:04,000
loop through that array of handlers

55
00:02:04,000 --> 00:02:06,000
to try to find a handler that knows how

56
00:02:06,000 --> 00:02:09,000
to handle the keyword that was in the statement.

57
00:02:09,000 --> 00:02:11,000
So down here, I'll create a for loop,

58
00:02:11,000 --> 00:02:13,000
let me just scroll down a little bit

59
00:02:13,000 --> 00:02:14,000
so we can see everything a little better.

60
00:02:14,000 --> 00:02:16,000
So again, we'll have that for looped

61
00:02:16,000 --> 00:02:18,000
that will go through the handlers.

62
00:02:18,000 --> 00:02:20,000
So inside there, let's add an if statement.

63
00:02:20,000 --> 00:02:22,000
We'll say our keyword,

64
00:02:22,000 --> 00:02:24,000
we'll use equalsIgnoreCase.

65
00:02:24,000 --> 00:02:26,000
And what do we want to do?

66
00:02:26,000 --> 00:02:27,000
We want to take the current handler

67
00:02:27,000 --> 00:02:28,000
that we're looping through,

68
00:02:28,000 --> 00:02:30,000
and we'll call it getKeyword method.

69
00:02:30,000 --> 00:02:33,000
In other words, is the keyword in the statement

70
00:02:33,000 --> 00:02:35,000
match the keyword that this handler knows how to handle?

71
00:02:35,000 --> 00:02:39,000
Okay, if it does, we'll take the current handler

72
00:02:39,000 --> 00:02:41,000
and assign it to our local variable, theHandler,

73
00:02:41,000 --> 00:02:43,000
and then we'll just go ahead

74
00:02:43,000 --> 00:02:44,000
and we'll break out of the loop.

75
00:02:44,000 --> 00:02:46,000
Okay, so we get out of this for statement now,

76
00:02:46,000 --> 00:02:48,000
we know that we have a handler that knows

77
00:02:48,000 --> 00:02:50,000
how to handle that particular keyword.

78
00:02:50,000 --> 00:02:52,000
Now we still have a little bit of housekeeping to do.

79
00:02:52,000 --> 00:02:54,000
We want to get our left values and right values

80
00:02:54,000 --> 00:02:56,000
and convert those into a double,

81
00:02:56,000 --> 00:02:57,000
so we'll use the same mechanism

82
00:02:57,000 --> 00:02:59,000
we used earlier in the course,

83
00:02:59,000 --> 00:03:00,000
so I'll declare a local variable

84
00:03:00,000 --> 00:03:02,000
called leftVal of type double,

85
00:03:02,000 --> 00:03:05,000
I'll then use the double class's parseDouble method,

86
00:03:05,000 --> 00:03:08,000
and I'll do that for parts of one.

87
00:03:08,000 --> 00:03:11,000
So that would be something like our 1.0 value.

88
00:03:11,000 --> 00:03:13,000
Right, now we'll do the same thing for rightVal.

89
00:03:13,000 --> 00:03:15,000
So now we have both values,

90
00:03:15,000 --> 00:03:16,000
so what we can do is we can have

91
00:03:16,000 --> 00:03:19,000
a local variable we'll call result,

92
00:03:19,000 --> 00:03:22,000
and then we'll call the handlers doCalculationMethod.

93
00:03:22,000 --> 00:03:25,000
And we simply pass in leftVal and rightVal.

94
00:03:25,000 --> 00:03:27,000
So when this returns, result now has

95
00:03:27,000 --> 00:03:29,000
whatever the result of the calculation was.

96
00:03:29,000 --> 00:03:31,000
So what we want to do now is

97
00:03:31,000 --> 00:03:33,000
build that string output value,

98
00:03:33,000 --> 00:03:36,000
again that idea of "1.0 + 2.0 = 3.0".

99
00:03:36,000 --> 00:03:37,000
Now the code to do that is going to be

100
00:03:37,000 --> 00:03:39,000
almost exactly the same as the code

101
00:03:39,000 --> 00:03:40,000
that we used in CalculateHelper.

102
00:03:40,000 --> 00:03:42,000
So I'm going to go over here to our CalculateHelper class,

103
00:03:42,000 --> 00:03:46,000
scroll down to its two string method.

104
00:03:46,000 --> 00:03:47,000
I'm going to grab the code here

105
00:03:47,000 --> 00:03:49,000
where it actually builds the output string.

106
00:03:49,000 --> 00:03:51,000
So let's copy that.

107
00:03:51,000 --> 00:03:53,000
Go back to my DynamicHelper.

108
00:03:53,000 --> 00:03:54,000
Paste that in, and of course

109
00:03:54,000 --> 00:03:56,000
I've got to make sure my variable names match,

110
00:03:56,000 --> 00:03:59,000
so instead of leftValue I have leftVal,

111
00:03:59,000 --> 00:04:01,000
rightValue is rightVal,

112
00:04:01,000 --> 00:04:03,000
but now the one for the symbol, like the plus sign,

113
00:04:03,000 --> 00:04:05,000
well how am I going to get that?

114
00:04:05,000 --> 00:04:06,000
Well, I'll go to the handler

115
00:04:06,000 --> 00:04:08,000
and I'll call this getSymbol method.

116
00:04:08,000 --> 00:04:10,000
So I'll get back whatever symbol

117
00:04:10,000 --> 00:04:12,000
is appropriate for this handler.

118
00:04:12,000 --> 00:04:15,000
Right, so, again, if we look at our Adder implementation,

119
00:04:15,000 --> 00:04:17,000
right, our keyword is add,

120
00:04:17,000 --> 00:04:19,000
our symbol is the plus sign,

121
00:04:19,000 --> 00:04:22,000
and doCalculation does the appropriate arithmetic,

122
00:04:22,000 --> 00:04:24,000
it adds them together.

123
00:04:24,000 --> 00:04:25,000
Let's go to our DynamicHelper,

124
00:04:25,000 --> 00:04:28,000
we have here now is all set to go.

125
00:04:28,000 --> 00:04:29,000
So let's go back to our main program now

126
00:04:29,000 --> 00:04:31,000
and create our dynamic helper.

127
00:04:31,000 --> 00:04:34,000
So we'll create a local variable here of type DynamicHelper,

128
00:04:34,000 --> 00:04:35,000
we call the variable helper,

129
00:04:35,000 --> 00:04:38,000
we get a new DynamicHelper,

130
00:04:38,000 --> 00:04:41,000
I'm going to pass in a new array of MathProcessing.

131
00:04:41,000 --> 00:04:42,000
And what we'll do is we'll just

132
00:04:42,000 --> 00:04:44,000
initialize the array in place,

133
00:04:44,000 --> 00:04:45,000
and what we do is put in

134
00:04:45,000 --> 00:04:47,000
the implementations we have for math processing.

135
00:04:47,000 --> 00:04:49,000
Now, currently the only one we have is Adder,

136
00:04:49,000 --> 00:04:51,000
so I'll just new up Adder.

137
00:04:51,000 --> 00:04:53,000
And so now what we want to do is

138
00:04:53,000 --> 00:04:55,000
loop through each of the statements,

139
00:04:55,000 --> 00:04:57,000
passing them into our helper.

140
00:04:57,000 --> 00:04:58,000
So we'll go through here,

141
00:04:58,000 --> 00:05:00,000
we'll declare a string to get our output.

142
00:05:00,000 --> 00:05:03,000
And then we simply say helper.process,

143
00:05:03,000 --> 00:05:05,000
and we pass in our statement.

144
00:05:05,000 --> 00:05:07,000
So when that returns, the variable output

145
00:05:07,000 --> 00:05:10,000
should have whatever our helper produced,

146
00:05:10,000 --> 00:05:11,000
so let's go ahead and write out output.

147
00:05:11,000 --> 00:05:13,000
And so, with that, we should have

148
00:05:13,000 --> 00:05:14,000
all the code in place that we need at this point

149
00:05:14,000 --> 00:05:16,000
to handle that one statement that does the add.

150
00:05:16,000 --> 00:05:18,000
The key thing here is that

151
00:05:18,000 --> 00:05:20,000
our DynamicHelper is doing all the work

152
00:05:20,000 --> 00:05:22,000
in terms of the MathProcessing interface.

153
00:05:22,000 --> 00:05:24,000
So let's go ahead and run our program

154
00:05:24,000 --> 00:05:25,000
and see if everything works as we expect.

155
00:05:25,000 --> 00:05:28,000
And it does, if we scroll down here,

156
00:05:28,000 --> 00:05:30,000
when we add 25.0 and 92.0,

157
00:05:30,000 --> 00:05:33,000
we get back 117.0.

158
00:05:33,000 --> 00:05:35,000
So everything worked just as we expected it to,

159
00:05:35,000 --> 00:05:37,000
but it did it in terms of the interface.

160
00:05:37,000 --> 00:05:39,000
So now, in the next clip, let's see

161
00:05:39,000 --> 00:05:42,000
what it's like to add another handler

162
00:05:42,000 --> 00:05:44,000
into our DynamicHelper and see that we can get

163
00:05:44,000 --> 00:05:46,000
new processing capabilities without making

164
00:05:46,000 --> 00:59:00,000
any changes to our DynamicHelper.

