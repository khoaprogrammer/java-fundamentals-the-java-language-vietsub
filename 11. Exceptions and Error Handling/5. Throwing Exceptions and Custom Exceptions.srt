1
00:00:01,000 --> 00:00:03,000
In addition to being able to handle exceptions,

2
00:00:03,000 --> 00:00:05,000
as we've done up until now, our code can actually

3
00:00:05,000 --> 00:00:08,000
throw exceptions as well, and that would just be in any case

4
00:00:08,000 --> 00:00:10,000
where we want to signal that an error had occurred.

5
00:00:10,000 --> 00:00:12,000
So, we might throw an exception because our code has

6
00:00:12,000 --> 00:00:14,000
identified something wrong with the data we're working on,

7
00:00:14,000 --> 00:00:17,000
or it might even be that our code has caught an exception

8
00:00:17,000 --> 00:00:19,000
and wants to throw a different exception

9
00:00:19,000 --> 00:00:21,000
to provide more information.

10
00:00:21,000 --> 00:00:23,000
Now, the way we throw an exception is quite easy,

11
00:00:23,000 --> 00:00:26,000
we simply use the throw keyword and to provide an instance

12
00:00:26,000 --> 00:00:29,000
of the exception we want to throw.

13
00:00:29,000 --> 00:00:31,000
Now, remember that, exceptions are objects, so they have to

14
00:00:31,000 --> 00:00:34,000
be created before they can be thrown.

15
00:00:34,000 --> 00:00:37,000
So, we just create them with the "new" keyword,

16
00:00:37,000 --> 00:00:38,000
and one of the most important things to remember when

17
00:00:38,000 --> 00:00:40,000
throw exceptions is that you want to be sure

18
00:00:40,000 --> 00:00:42,000
that you provide meaningful detail.

19
00:00:42,000 --> 00:00:45,000
We want to make it easy for whoever has to handle

20
00:00:45,000 --> 00:00:48,000
this exception to be able to figure out what was wrong.

21
00:00:48,000 --> 00:00:51,000
Now, most exception classes provide a constructor

22
00:00:51,000 --> 00:00:54,000
that accepts a string message or some other detail.

23
00:00:54,000 --> 00:00:55,000
So, you want to make sure you put

24
00:00:55,000 --> 00:00:58,000
as much meaningful information into that as you can.

25
00:00:58,000 --> 00:01:00,000
Now, as we said, sometimes we'll throw an exception

26
00:01:00,000 --> 00:01:02,000
because our code caught an exception,

27
00:01:02,000 --> 00:01:05,000
and we want to add some more information to it.

28
00:01:05,000 --> 00:01:07,000
Well, in that situation, you want to always make sure that

29
00:01:07,000 --> 00:01:10,000
your new exception that you throw includes

30
00:01:10,000 --> 00:01:13,000
the original exception, you don't want to lose that detail.

31
00:01:13,000 --> 00:01:16,000
This idea of tying one exception to another is

32
00:01:16,000 --> 00:01:19,000
very fundamental to the exception classes.

33
00:01:19,000 --> 00:01:21,000
All the exception classes have a method called,

34
00:01:21,000 --> 00:01:24,000
initCause, that will allow you to associate an exception

35
00:01:24,000 --> 00:01:27,000
with an instance of another exception.

36
00:01:27,000 --> 00:01:29,000
This idea of associating exceptions together is

37
00:01:29,000 --> 00:01:33,000
so fundamental that many exception classes actually provide

38
00:01:33,000 --> 00:01:36,000
a constructor that will accept the other exception, so you

39
00:01:36,000 --> 00:01:38,000
can actually create the new exception

40
00:01:38,000 --> 00:01:40,000
and associate the original, all in one step.

41
00:01:40,000 --> 00:01:42,000
Now, in most cases when you're throwing an exception,

42
00:01:42,000 --> 00:01:43,000
you're going to want to throw

43
00:01:43,000 --> 00:01:45,000
one of the existing exception types.

44
00:01:45,000 --> 00:01:48,000
But, it is possible to create your own custom

45
00:01:48,000 --> 00:01:51,000
exception types, and throw those as well.

46
00:01:51,000 --> 00:01:53,000
Now, to really (speaks too fast), in most cases,

47
00:01:53,000 --> 00:01:55,000
you're going to want to use

48
00:01:55,000 --> 00:01:57,000
one of the existing exception types.

49
00:01:57,000 --> 00:01:58,000
But, if you really have a situation where you've got

50
00:01:58,000 --> 00:02:00,000
something you need to provide information on

51
00:02:00,000 --> 00:02:02,000
that doesn't really fit one of the existing exceptions,

52
00:02:02,000 --> 00:02:05,000
you can define your own.

53
00:02:05,000 --> 00:02:07,000
But again, that's going to be one of these situations where

54
00:02:07,000 --> 00:02:09,000
you've got some real information, some real value to provide

55
00:02:09,000 --> 00:02:12,000
that you can't with the existing exception types.

56
00:02:12,000 --> 00:02:15,000
Now, if you do define your own custom exception type,

57
00:02:15,000 --> 00:02:18,000
you're generally going to inherit from the Exception class.

58
00:02:18,000 --> 00:02:20,000
But, that has an interesting implication.

59
00:02:20,000 --> 00:02:22,000
Remember that any exception that inherits from

60
00:02:22,000 --> 00:02:25,000
the Exception class, but not the RuntimeException class,

61
00:02:25,000 --> 00:02:27,000
is a checked exception.

62
00:02:27,000 --> 00:02:31,000
So, exceptions you define will become checked exceptions.

63
00:02:31,000 --> 00:02:33,000
The process of implementing a custom exception type is

64
00:02:33,000 --> 00:02:35,000
generally pretty easy.

65
00:02:35,000 --> 00:02:37,000
In fact, very often, the only members

66
00:02:37,000 --> 00:02:40,000
that your exception type will have will be constructors.

67
00:02:40,000 --> 00:02:43,000
And the reason for that is that, most of the required

68
00:02:43,000 --> 00:02:45,000
functionality is inherited.

69
00:02:45,000 --> 00:02:47,000
The base classes have the ability for you to associate

70
00:02:47,000 --> 00:02:50,000
a string message and have the receiver of the exception

71
00:02:50,000 --> 00:02:51,000
access that message.

72
00:02:51,000 --> 00:02:54,000
The bass class provides things like stack traces,

73
00:02:54,000 --> 00:02:56,000
so you generally don't need to provide a lot more than that.

74
00:02:56,000 --> 00:02:58,000
I mean, there may be some situations where there's some

75
00:02:58,000 --> 00:03:00,000
extended error detail you might want to add.

76
00:03:00,000 --> 00:03:02,000
In those cases, you might have some additional

77
00:03:02,000 --> 00:03:04,000
getter methods to access those,

78
00:03:04,000 --> 00:03:06,000
but there's not going to be a lot of that.

79
00:03:06,000 --> 00:03:07,000
Now, when you define your custom exception type,

80
00:03:07,000 --> 00:03:10,000
you'll generally want to have at least two constructors.

81
00:03:10,000 --> 00:03:12,000
You'll have one constructor that accepts

82
00:03:12,000 --> 00:03:14,000
whatever the required detail is.

83
00:03:14,000 --> 00:03:15,000
That may be a simple string message,

84
00:03:15,000 --> 00:03:17,000
it may be some meaningful fields.

85
00:03:17,000 --> 00:03:20,000
You'll generally also want to have another constructor

86
00:03:20,000 --> 00:03:23,000
that accepts that same detail along with

87
00:03:23,000 --> 00:03:25,000
an originating exception, again, so that,

88
00:03:25,000 --> 00:03:26,000
if this exception's thrown in response to

89
00:03:26,000 --> 00:03:29,000
a different exception, they can be tied together.

90
00:03:29,000 --> 00:03:31,000
And, you could, of course, have more constructors, then,

91
00:03:31,000 --> 00:03:32,000
if you want to.

92
00:03:32,000 --> 00:03:33,000
You can have a no-argument constructor,

93
00:03:33,000 --> 00:03:34,000
you can have whatever you need,

94
00:03:34,000 --> 00:03:36,000
but you'll generally have at least these two.

95
00:03:36,000 --> 00:03:38,000
Now, in the next clip, we'll take a look at

96
00:03:38,000 --> 00:03:41,000
how we can actually define a custom exception in code,

97
00:03:41,000 --> 00:59:00,000
and how we actually throw it.

