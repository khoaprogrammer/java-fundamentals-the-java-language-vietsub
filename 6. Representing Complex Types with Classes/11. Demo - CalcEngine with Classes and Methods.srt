1
00:00:02,000 --> 00:00:04,000
Let's revisit our CalcEngine demo and update it

2
00:00:04,000 --> 00:00:07,000
to use classes and methods.

3
00:00:07,000 --> 00:00:10,000
Here we are in our CalcEngine program as we left it

4
00:00:10,000 --> 00:00:12,000
at the end of the last module.

5
00:00:12,000 --> 00:00:15,000
Remember what we had done was create four pile of arrays.

6
00:00:15,000 --> 00:00:17,000
One with the leftVals, one with the rightVals,

7
00:00:17,000 --> 00:00:19,000
one with the opCodes, for the operation

8
00:00:19,000 --> 00:00:22,000
we're going to perform, then an array to hold the results.

9
00:00:22,000 --> 00:00:25,000
And the way we create a commonality across this arrays

10
00:00:25,000 --> 00:00:27,000
was that we said that well the first member of each array

11
00:00:27,000 --> 00:00:29,000
corresponds to the first member in every other array.

12
00:00:29,000 --> 00:00:32,000
Same for the second, third, and fourth members.

13
00:00:32,000 --> 00:00:35,000
A much better way to represent this idea of related values

14
00:00:35,000 --> 00:00:37,000
is to use classes.

15
00:00:37,000 --> 00:00:40,000
So let's go ahead and add a class to our project here.

16
00:00:40,000 --> 00:00:43,000
Now I'm going to go ahead and use the IDEs ability

17
00:00:43,000 --> 00:00:45,000
to create class for us.

18
00:00:45,000 --> 00:00:47,000
All it's going to do is create a class file

19
00:00:47,000 --> 00:00:49,000
and put the class definition side of it.

20
00:00:49,000 --> 00:00:51,000
All the major ID support this concept

21
00:00:51,000 --> 00:00:53,000
and they all pretty much do it almost the same way.

22
00:00:53,000 --> 00:00:56,000
All I'm going to do here is go to my package name:

23
00:00:56,000 --> 00:01:00,000
com_Pluralsight_calcengine, right click on it, say New,

24
00:01:00,000 --> 00:01:03,000
take Java Class and give it a name of the class.

25
00:01:03,000 --> 00:01:06,000
So let's call it class MathEquation.

26
00:01:06,000 --> 00:01:09,000
Go ahead and just tell it to go and create it.

27
00:01:09,000 --> 00:01:11,000
What that does is create a source file

28
00:01:11,000 --> 00:01:14,000
named MathEquation.java and put a public class

29
00:01:14,000 --> 00:01:16,000
decoration inside of it.

30
00:01:16,000 --> 00:01:20,000
Now what I want to do inside of here is create fields

31
00:01:20,000 --> 00:01:22,000
for each of the values that I need to keep track of.

32
00:01:22,000 --> 00:01:24,000
So if I go back to main for just a second here,

33
00:01:24,000 --> 00:01:28,000
basically, I want to create fields for leftVals, rightVals,

34
00:01:28,000 --> 00:01:30,000
opCodes, and results.

35
00:01:30,000 --> 00:01:33,000
Let's go back inside of here.

36
00:01:33,000 --> 00:01:35,000
All I need to do is make the space to do that.

37
00:01:35,000 --> 00:01:37,000
So first I'll do leftVal.

38
00:01:37,000 --> 00:01:40,000
So I just made a public double, I called it leftVal,

39
00:01:40,000 --> 00:01:42,000
very similar to what it was called in the old program.

40
00:01:42,000 --> 00:01:45,000
Do the same thing for our rightVal, our opCode,

41
00:01:45,000 --> 00:01:47,000
and our result.

42
00:01:47,000 --> 00:01:49,000
So now I have the ability to store all those values together

43
00:01:49,000 --> 00:01:52,000
inside this one class.

44
00:01:52,000 --> 00:01:53,000
Let's head back to the main program.

45
00:01:53,000 --> 00:01:55,000
Now if we look at the main program, inside of here

46
00:01:55,000 --> 00:01:57,000
this is great because of switch statement.

47
00:01:57,000 --> 00:02:01,000
This is kind of broken in terms of the fact that

48
00:02:01,000 --> 00:02:03,000
the program has to know a whole lot about how

49
00:02:03,000 --> 00:02:04,000
these operations work.

50
00:02:04,000 --> 00:02:07,000
The reality is programs wants to have the work done.

51
00:02:07,000 --> 00:02:09,000
So this switch statement can really be moved out of here

52
00:02:09,000 --> 00:02:12,000
and let's move it in to our class and so we can wrap it up

53
00:02:12,000 --> 00:02:13,000
inside of a simple method.

54
00:02:13,000 --> 00:02:16,000
So I want to go ahead and cut that away.

55
00:02:16,000 --> 00:02:19,000
Go back to my equation and let's add a public method on here

56
00:02:19,000 --> 00:02:21,000
called execute.

57
00:02:21,000 --> 00:02:23,000
And as I mark the method void

58
00:02:23,000 --> 00:02:25,000
saying it doesn't return any values.

59
00:02:25,000 --> 00:02:26,000
Matter of fact it's not going to take any parameters either

60
00:02:26,000 --> 00:02:27,000
so it's going to go ahead

61
00:02:27,000 --> 00:02:30,000
and put the code block inside of here.

62
00:02:30,000 --> 00:02:32,000
What I'll do now is I'll paste that switch statement

63
00:02:32,000 --> 00:02:34,000
inside of this execute method.

64
00:02:34,000 --> 00:02:36,000
Now I want to do now is just update it

65
00:02:36,000 --> 00:02:38,000
to work on its own value.

66
00:02:38,000 --> 00:02:40,000
So the idea is on for the first one here for a,

67
00:02:40,000 --> 00:02:42,000
just going to get rid of the subscripts

68
00:02:42,000 --> 00:02:46,000
because I want to use opCode as declares out of class.

69
00:02:46,000 --> 00:02:49,000
Same thing for result, I'm just going to make that result.

70
00:02:49,000 --> 00:02:51,000
Same thing for leftVals and rightVals.

71
00:02:51,000 --> 00:02:54,000
So I got my result equals leftVal plus rightVal,

72
00:02:54,000 --> 00:02:55,000
that's using all the members.

73
00:02:55,000 --> 00:02:58,000
Here up in the opCode I need to take that S off

74
00:02:58,000 --> 00:02:59,000
so it matches.

75
00:02:59,000 --> 00:03:01,000
So now the opCode matches up as well.

76
00:03:01,000 --> 00:03:05,000
So I'm now using the case of an all of my member variables.

77
00:03:05,000 --> 00:03:09,000
opCode for the switch, then results, leftVal, and rightVal.

78
00:03:09,000 --> 00:03:11,000
I'm going to do the same thing for all the different cases

79
00:03:11,000 --> 00:03:13,000
under the default down here.

80
00:03:13,000 --> 00:03:15,000
So now my execute method knows how to perform

81
00:03:15,000 --> 00:03:18,000
all the operations using the member fields.

82
00:03:18,000 --> 00:03:21,000
Now next thing I need to do is go ahead and start creating

83
00:03:21,000 --> 00:03:23,000
instances in my MathEquation.

84
00:03:23,000 --> 00:03:26,000
So I'm going to back here to the Main program.

85
00:03:26,000 --> 00:03:27,000
And we're going to do is get rid

86
00:03:27,000 --> 00:03:29,000
of all these arrays up here.

87
00:03:29,000 --> 00:03:30,000
I'm just going to comment those out

88
00:03:30,000 --> 00:03:33,000
and what we'll do is instead is create an array

89
00:03:33,000 --> 00:03:34,000
of our MathEquation class.

90
00:03:34,000 --> 00:03:36,000
So I'm just going to declare MathEquation,

91
00:03:36,000 --> 00:03:38,000
put the array indicator on there,

92
00:03:38,000 --> 00:03:40,000
we'll go ahead and call this equations

93
00:03:40,000 --> 00:03:44,000
and set it equal to a new array of MathEquation.

94
00:03:44,000 --> 00:03:47,000
Now we've created the array of MathEquation.

95
00:03:47,000 --> 00:03:50,000
Now that creates the array itself but I still need to create

96
00:03:50,000 --> 00:03:54,000
the individual MathEquation instances for each array member.

97
00:03:54,000 --> 00:03:56,000
So what I basically need to do is say something

98
00:03:56,000 --> 00:04:02,000
like equations subzero equals new MathEquation

99
00:04:02,000 --> 00:04:05,000
and then go through and set each of the fields:

100
00:04:05,000 --> 00:04:07,000
leftVals, rightVals, and opCodes.

101
00:04:07,000 --> 00:04:10,000
Now since we're going to have to do that four times

102
00:04:10,000 --> 00:04:12,000
here's another great chance to use a method.

103
00:04:12,000 --> 00:04:14,000
You can use a method to kind of encapsulate all that work

104
00:04:14,000 --> 00:04:17,000
of creating a new instance and setting all the values.

105
00:04:17,000 --> 00:04:19,000
So we'll go ahead and create that here

106
00:04:19,000 --> 00:04:21,000
inside of my Main class.

107
00:04:21,000 --> 00:04:23,000
So I'm going to create a new method here,

108
00:04:23,000 --> 00:04:26,000
I'm just going to go ahead and call the method create,

109
00:04:26,000 --> 00:04:28,000
so I'll mark it as public.

110
00:04:28,000 --> 00:04:30,000
Let's use a modifier called static

111
00:04:30,000 --> 00:04:31,000
that we haven't talked about yet.

112
00:04:31,000 --> 00:04:33,000
We'll talk about that one a little bit later in the course.

113
00:04:33,000 --> 00:04:35,000
Let's just go ahead and put it in for now.

114
00:04:35,000 --> 00:04:38,000
What our create method is going to do is return back

115
00:04:38,000 --> 00:04:39,000
a new instance of MathEquation.

116
00:04:39,000 --> 00:04:41,000
So if return type is MathEquation

117
00:04:41,000 --> 00:04:44,000
again we're going to call it create,

118
00:04:44,000 --> 00:04:46,000
and what it will do is we accept a parameter for each

119
00:04:46,000 --> 00:04:48,000
of the fields we want to set,

120
00:04:48,000 --> 00:04:51,000
leftVals, rightVals, and opCodes.

121
00:04:51,000 --> 00:04:53,000
We have all the parameters there, I'm just going to put

122
00:04:53,000 --> 00:04:55,000
the brackets in place.

123
00:04:55,000 --> 00:04:56,000
So now we're going to do inside of here

124
00:04:56,000 --> 00:04:58,000
is create a new instance of the MathEquation

125
00:04:58,000 --> 00:05:01,000
so we declare MathEquation we'll call equation

126
00:05:01,000 --> 00:05:03,000
and then new up the MathEquation.

127
00:05:03,000 --> 00:05:05,000
So that gives us our instance of the MathEquation

128
00:05:05,000 --> 00:05:07,000
and what we want to do, we just go scroll it down here

129
00:05:07,000 --> 00:05:09,000
so we can see a little better.

130
00:05:09,000 --> 00:05:12,000
What we want to do is go through and set all the fields

131
00:05:12,000 --> 00:05:14,000
that correspond to the parameters.

132
00:05:14,000 --> 00:05:16,000
Say for leftVal I'm going to say equation.leftVal

133
00:05:16,000 --> 00:05:19,000
equals leftVal.

134
00:05:19,000 --> 00:05:21,000
So that takes whatever that leftVal parameter is

135
00:05:21,000 --> 00:05:24,000
and sets the leftVal field on equation.

136
00:05:24,000 --> 00:05:28,000
We do the same thing for rightVal and opCode.

137
00:05:28,000 --> 00:05:30,000
With all the values set the only thing left to do

138
00:05:30,000 --> 00:05:33,000
is return back our equation.

139
00:05:33,000 --> 00:05:36,000
So with that all set what we can do is up here

140
00:05:36,000 --> 00:05:37,000
in the main part where we create each one

141
00:05:37,000 --> 00:05:40,000
rather than explicitly create them, we can instead

142
00:05:40,000 --> 00:05:41,000
call that create method.

143
00:05:41,000 --> 00:05:45,000
So what I'll do here is just call create and then pass in

144
00:05:45,000 --> 00:05:47,000
the values I want to use.

145
00:05:47,000 --> 00:05:50,000
So for leftVal and the first value is a 100.0

146
00:05:50,000 --> 00:05:54,000
then I use 50.0 and then the opCode d.

147
00:05:54,000 --> 00:05:58,000
Now do the same thing for the other three members.

148
00:05:58,000 --> 00:06:01,000
So now we have our MathEquation array created

149
00:06:01,000 --> 00:06:04,000
and then we also have the individual MathEquation instances

150
00:06:04,000 --> 00:06:06,000
created in to each one of the arrays.

151
00:06:06,000 --> 00:06:07,000
So I'm going to go ahead and get rid of this for statement

152
00:06:07,000 --> 00:06:10,000
here, we don't need that one anymore.

153
00:06:10,000 --> 00:06:12,000
What I'll do here is that where we have this foreach

154
00:06:12,000 --> 00:06:15,000
where we're going to the results before, we can do now

155
00:06:15,000 --> 00:06:18,000
is go to that MathEquation array.

156
00:06:18,000 --> 00:06:21,000
So I'll go ahead and declare as MathEquation.

157
00:06:21,000 --> 00:06:24,000
I'll call the variable equation and what it will

158
00:06:24,000 --> 00:06:28,000
loop through is equations.

159
00:06:28,000 --> 00:06:32,000
So now what I can do inside of here is for each one

160
00:06:32,000 --> 00:06:37,000
I can simply say equation.execute, what that will do then

161
00:06:37,000 --> 00:06:39,000
is when I call equation.execute

162
00:06:39,000 --> 00:06:43,000
for each of these sets of values will go into MathEquation

163
00:06:43,000 --> 00:06:46,000
call execute, check the opCode,

164
00:06:46,000 --> 00:06:50,000
perform the appropriate operation, store that in results.

165
00:06:50,000 --> 00:06:53,000
So when I get back here what I can then print out

166
00:06:53,000 --> 00:06:55,000
is simply equation.result.

167
00:06:55,000 --> 00:06:59,000
So now I have a much more encapsulated application here.

168
00:06:59,000 --> 00:07:02,000
In a sense that I have the idea of what I want to perform

169
00:07:02,000 --> 00:07:05,000
modeled into my class MathEquation.

170
00:07:05,000 --> 00:07:09,000
All right so it has the fields for each of the things I need

171
00:07:09,000 --> 00:07:11,000
to perform the operations.

172
00:07:11,000 --> 00:07:13,000
The execute method does the actual work.

173
00:07:13,000 --> 00:07:15,000
If we go back to the application,

174
00:07:15,000 --> 00:07:17,000
the application doesn't care about any

175
00:07:17,000 --> 00:07:18,000
of those kinds of details.

176
00:07:18,000 --> 00:07:21,000
It simply creates each MathEquation instance,

177
00:07:21,000 --> 00:07:23,000
loops through them, tells each one to execute

178
00:07:23,000 --> 00:07:25,000
and then displays the result.

179
00:07:25,000 --> 00:07:28,000
So if we go ahead and run this,

180
00:07:28,000 --> 00:07:29,000
we get our appropriate results out.

181
00:07:29,000 --> 00:07:32,000
Is at 100 divided by 50 is two.

182
00:07:32,000 --> 00:07:35,000
25 plus 92 is 117.

183
00:07:35,000 --> 00:07:38,000
225 minus 17 is 208.

184
00:07:38,000 --> 00:59:00,000
And 11 times three is 33.

