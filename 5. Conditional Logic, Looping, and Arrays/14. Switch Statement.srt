1
00:00:02,000 --> 00:00:04,000
Switch transfers control to a particular statement based

2
00:00:04,000 --> 00:00:07,000
on the value and really what its purpose in life is is to

3
00:00:07,000 --> 00:00:11,000
simplify the idea of testing against multiple matches.

4
00:00:11,000 --> 00:00:15,000
So we set up the switch keyword, you put in the value

5
00:00:15,000 --> 00:00:16,000
you want to test.

6
00:00:16,000 --> 00:00:19,000
This is not a condition; it's the value you want to test.

7
00:00:19,000 --> 00:00:24,000
And then you go through inside a set of brackets, the word

8
00:00:24,000 --> 00:00:27,000
case and the different values you want to match against

9
00:00:27,000 --> 00:00:30,000
and then the statement you want to run if it matches against

10
00:00:30,000 --> 00:00:33,000
that value, then the word case again and another value you

11
00:00:33,000 --> 00:00:36,000
want to match against, and those statements.

12
00:00:36,000 --> 00:00:38,000
Repeat that as many times as you like.

13
00:00:38,000 --> 00:00:41,000
Now of the primitive types we talked about, only char

14
00:00:41,000 --> 00:00:43,000
and integers can be used with a switch.

15
00:00:43,000 --> 00:00:44,000
Later in the course we'll learn other types that may

16
00:00:44,000 --> 00:00:47,000
work with a switch, but of those we've talked about so far,

17
00:00:47,000 --> 00:00:50,000
only char and integer types can be used.

18
00:00:50,000 --> 00:00:54,000
One thing to note is that a match can execute more than one statement.

19
00:00:54,000 --> 00:00:56,000
Notice that under the case there, I don't have the word

20
00:00:56,000 --> 00:00:59,000
statement, I have statements, plural.

21
00:00:59,000 --> 00:01:01,000
But you can list many statements underneath of that

22
00:01:01,000 --> 00:01:05,000
case keyword, and in fact the way a switch works is that

23
00:01:05,000 --> 00:01:08,000
once it matches against a case, it will keep running all the

24
00:01:08,000 --> 00:01:12,000
statements from below that case all the way to the end

25
00:01:12,000 --> 00:01:13,000
of the switch statement.

26
00:01:13,000 --> 00:01:15,000
So we have to use the break keyword to prevent what

27
00:01:15,000 --> 00:01:18,000
we call falling through and that's falling through from

28
00:01:18,000 --> 00:01:20,000
one case to the next.

29
00:01:20,000 --> 00:01:22,000
We'll see an example of that in the next slide.

30
00:01:22,000 --> 00:01:24,000
Now in addition to matching against specific values,

31
00:01:24,000 --> 00:01:28,000
we can also put in a default keyword if we want which'll

32
00:01:28,000 --> 00:01:30,000
handle any unmatched values and all we do is we put that at

33
00:01:30,000 --> 00:01:32,000
the end of the switch.

34
00:01:32,000 --> 00:01:34,000
We use the keyword default followed by a colon and any

35
00:01:34,000 --> 00:01:38,000
statements we want to run there.

36
00:01:38,000 --> 00:01:40,000
So let's see an example of using switch.

37
00:01:40,000 --> 00:01:43,000
So we have some code here and we have an integer field,

38
00:01:43,000 --> 00:01:45,000
iVal, which is set to 10.

39
00:01:45,000 --> 00:01:49,000
And in our switch, I'm going to put iVal modulus two,

40
00:01:49,000 --> 00:01:52,000
which says take iVal, divide it by two, and give me

41
00:01:52,000 --> 00:01:53,000
back the remainder.

42
00:01:53,000 --> 00:01:56,000
Well, if you divide a whole number by two, it's always

43
00:01:56,000 --> 00:01:58,000
going to be either zero or one, right?

44
00:01:58,000 --> 00:02:01,000
So it's a great way to just test if a value is odd or even.

45
00:02:01,000 --> 00:02:05,000
So what I'll do here is I'll have a case for the value is zero, right?

46
00:02:05,000 --> 00:02:07,000
So all even numbers will have a value of zero,

47
00:02:07,000 --> 00:02:11,000
so I'll print out that, whatever the value is, is even.

48
00:02:11,000 --> 00:02:14,000
I'm also going to put in a case for one, so that would

49
00:02:14,000 --> 00:02:17,000
be our odd values, and then I'll go ahead and put a

50
00:02:17,000 --> 00:02:20,000
default in place, and I'll say, "Oops, it broke" because

51
00:02:20,000 --> 00:02:23,000
we should certainly never see this, the value of this

52
00:02:23,000 --> 00:02:27,000
default, because all whole numbers are either going to be odd or even.

53
00:02:27,000 --> 00:02:30,000
So if we run this code now, it'll go through, it will

54
00:02:30,000 --> 00:02:34,000
say 10, we'll divide it by two, the remainder will be zero,

55
00:02:34,000 --> 00:02:38,000
so it'll match the case for zero, so if I run it, it'll

56
00:02:38,000 --> 00:02:41,000
actually print out "10 is even" but what would happen

57
00:02:41,000 --> 00:02:44,000
then, it would then print out "10 is odd" and then

58
00:02:44,000 --> 00:02:47,000
"oops it broke" because what's happening is that once

59
00:02:47,000 --> 00:02:51,000
it matched on that case of zero, it's now running all the

60
00:02:51,000 --> 00:02:57,000
statements below that, so all those different print lines are being run.

61
00:02:57,000 --> 00:02:59,000
The way we prevent that is with the break keyword.

62
00:02:59,000 --> 00:03:02,000
So what we can do is that at the end of each case block,

63
00:03:02,000 --> 00:03:05,000
or each case section, we'll put in the keyword break,

64
00:03:05,000 --> 00:03:07,000
which says, "Run until you reach this point and then jump

65
00:03:07,000 --> 00:03:09,000
"out of the switch statement."

66
00:03:09,000 --> 00:03:12,000
So we'll do that for our case of one, and we're also going

67
00:03:12,000 --> 00:03:14,000
to do that even for the default.

68
00:03:14,000 --> 00:03:16,000
The default is the last section, so technically you don't

69
00:03:16,000 --> 00:03:18,000
need to have a break there, but it's considered good

70
00:03:18,000 --> 00:03:22,000
programming practice, especially useful for situations

71
00:03:22,000 --> 00:03:25,000
like if you refactor your code and that default becomes

72
00:03:25,000 --> 00:03:27,000
an actual case or something later, so it's just a good

73
00:03:27,000 --> 00:03:29,000
programming practice for each of those sections to put

74
00:03:29,000 --> 00:03:31,000
a break at the end.

75
00:03:31,000 --> 00:03:35,000
So now if we run this, we'll take our 10, and 10 mod two

76
00:03:35,000 --> 00:03:41,000
is zero, matches on the zero, and it prints out just the "10 is even".

77
00:03:41,000 --> 00:03:43,000
We take that iVal there, and say we change it to something

78
00:03:43,000 --> 00:03:49,000
like 25, well now we run it, 25 mod two is 1, it'll match on

79
00:03:49,000 --> 00:59:00,000
that, and it prints out that "25 is odd".

