1
00:00:02,000 --> 00:00:04,000
Let's do another demo, we'll call it our CalcEngine demo.

2
00:00:04,000 --> 00:00:06,000
And what we'll do in this demo is, we're going to create

3
00:00:06,000 --> 00:00:09,000
a simple application that can go through various just

4
00:00:09,000 --> 00:00:11,000
mathematical calculations.

5
00:00:11,000 --> 00:00:13,000
As we're starting it in this module, but we'll be using it

6
00:00:13,000 --> 00:00:15,000
throughout the course and enhancing it with the various

7
00:00:15,000 --> 00:00:18,000
things we've learned.

8
00:00:18,000 --> 00:00:20,000
We'll start out by creating a brand new project.

9
00:00:20,000 --> 00:00:22,000
I'm going to use IntelliJ for mine, but you can use whatever

10
00:00:22,000 --> 00:00:25,000
you prefer.

11
00:00:25,000 --> 00:00:28,000
We'll create a new project.

12
00:00:28,000 --> 00:00:30,000
And remember that as I mentioned earlier, just because the

13
00:00:30,000 --> 00:00:32,000
screen resolution we're recording, you can't see the very

14
00:00:32,000 --> 00:00:34,000
bottom of this wizard screen, so you scroll up here, and

15
00:00:34,000 --> 00:00:36,000
notice there's a Next button down there at the bottom.

16
00:00:36,000 --> 00:00:38,000
I'm just going to go ahead and create a Java project by

17
00:00:38,000 --> 00:00:40,000
clicking Next.

18
00:00:40,000 --> 00:00:43,000
Going to go ahead and create a command line project.

19
00:00:43,000 --> 00:00:45,000
Again, down there at the bottom there's a Next button,

20
00:00:45,000 --> 00:00:48,000
so I'll go ahead and click that.

21
00:00:48,000 --> 00:00:52,000
So I'm going to call this project CalcEngine and then for my

22
00:00:52,000 --> 00:00:56,000
packaging, I'm going to be com.Pluralsight and I'll call

23
00:00:56,000 --> 00:01:00,000
it .CalcEngine so I've got my project name and my packaging.

24
00:01:00,000 --> 00:01:02,000
Now I'm going to click the Finish button down there

25
00:01:02,000 --> 00:01:05,000
at the bottom.

26
00:01:05,000 --> 00:01:06,000
So now we have our application created.

27
00:01:06,000 --> 00:01:07,000
I'm going to go in here and just

28
00:01:07,000 --> 00:01:09,000
get rid of this comment line,

29
00:01:09,000 --> 00:01:10,000
take that out of the way.

30
00:01:10,000 --> 00:01:12,000
Throughout this project, throughout this course as we

31
00:01:12,000 --> 00:01:15,000
build this project, we're going to just do some mathematical

32
00:01:15,000 --> 00:01:19,000
operations and have the program just do kind of smarter

33
00:01:19,000 --> 00:01:20,000
and smarter things for us.

34
00:01:20,000 --> 00:01:22,000
We're going to initially start off very simple, just doing

35
00:01:22,000 --> 00:01:25,000
very two member calculations, you know, adding two

36
00:01:25,000 --> 00:01:27,000
numbers together, multiplying two numbers together,

37
00:01:27,000 --> 00:01:28,000
that sort of thing.

38
00:01:28,000 --> 00:01:30,000
So what we're going to do is declare a couple of variables

39
00:01:30,000 --> 00:01:31,000
up here at the top first of all.

40
00:01:31,000 --> 00:01:33,000
So we're going to declare two variables that are double,

41
00:01:33,000 --> 00:01:37,000
val1, val2, got those two variables.

42
00:01:37,000 --> 00:01:41,000
Let's go ahead and have another double for result.

43
00:01:41,000 --> 00:01:43,000
So now I have the ability to have two variables to operate

44
00:01:43,000 --> 00:01:46,000
on, store the result, and what we'll do is have, we use a

45
00:01:46,000 --> 00:01:49,000
concept called an opCode.

46
00:01:49,000 --> 00:01:51,000
We're just going to use a one letter code to indicate the

47
00:01:51,000 --> 00:01:54,000
mathematical operation we want to execute, like a for add,

48
00:01:54,000 --> 00:01:57,000
s for subtract, that sort of thing.

49
00:01:57,000 --> 00:01:59,000
We're going to create a char variable called opCode,

50
00:01:59,000 --> 00:02:02,000
so that sets up my basic ability to set the values of what

51
00:02:02,000 --> 00:02:03,000
I want to do.

52
00:02:03,000 --> 00:02:06,000
I'm going to go through now and just set up if statements

53
00:02:06,000 --> 00:02:08,000
to perform those operations.

54
00:02:08,000 --> 00:02:10,000
So first one would be add so that's going to be the opCode a

55
00:02:10,000 --> 00:02:16,000
so I'm going to say if and then opCode equals a,

56
00:02:16,000 --> 00:02:19,000
so if the opCode is a, what I want to do in that case

57
00:02:19,000 --> 00:02:23,000
is add the two numbers together and assigns a result.

58
00:02:23,000 --> 00:02:25,000
So it's that simple.

59
00:02:25,000 --> 00:02:27,000
So I've got the a in place now for add and I want to do

60
00:02:27,000 --> 00:02:30,000
an s for subtract, so I'm just going to do an else if,

61
00:02:30,000 --> 00:02:34,000
in this case opCode equals s and of course in that case

62
00:02:34,000 --> 00:02:37,000
I'm just going to subtract value 2 from value 1

63
00:02:37,000 --> 00:02:39,000
and we'll do the same thing for d for divide and

64
00:02:39,000 --> 00:02:41,000
m for multiply.

65
00:02:41,000 --> 00:02:43,000
Finally what we want to do is just print out the value

66
00:02:43,000 --> 00:02:45,000
of result.

67
00:02:45,000 --> 00:02:48,000
Notice here that throughout the program, the ID is

68
00:02:48,000 --> 00:02:51,000
underlining all of my variables.

69
00:02:51,000 --> 00:02:52,000
It's showing me that there must be something wrong.

70
00:02:52,000 --> 00:02:54,000
And what it is is that we're trying to use all these

71
00:02:54,000 --> 00:02:56,000
variables without having initialized them, right?

72
00:02:56,000 --> 00:02:58,000
So what we need to do is go ahead and initialize them.

73
00:02:58,000 --> 00:03:03,000
So let's go ahead and set val1 to 100 and val2 to 50.

74
00:03:03,000 --> 00:03:04,000
So we've got those initialized.

75
00:03:04,000 --> 00:03:06,000
Let's set our first opCode here, let's just make that

76
00:03:06,000 --> 00:03:08,000
a for add.

77
00:03:08,000 --> 00:03:10,000
So now we've got all the variables we're using initialized.

78
00:03:10,000 --> 00:03:13,000
Right now we're going to assign result, but you know it's

79
00:03:13,000 --> 00:03:15,000
possible that maybe we set the opCode wrong.

80
00:03:15,000 --> 00:03:18,000
Instead of it being a proper value like a, s, d or m,

81
00:03:18,000 --> 00:03:20,000
maybe we can actually put some like x or whatever.

82
00:03:20,000 --> 00:03:22,000
So what I'll do is at the end of our else if, we'll add an

83
00:03:22,000 --> 00:03:26,000
else, because if it's not any of the values we expect,

84
00:03:26,000 --> 00:03:29,000
we're just going to get it to set the result to zero.

85
00:03:29,000 --> 00:03:31,000
All right so now we have a very simple program in place

86
00:03:31,000 --> 00:03:35,000
that we can actually set an opCode set two values and get

87
00:03:35,000 --> 00:03:39,000
the result, so right now I'm set to add 100 plus 50.

88
00:03:39,000 --> 00:03:41,000
So let's go ahead and run it.

89
00:03:41,000 --> 00:03:44,000
And we display 150, so it did the math correctly.

90
00:03:44,000 --> 00:03:47,000
Of course all I have to do now is change this from an a

91
00:03:47,000 --> 00:03:53,000
to a d, and now it'll divide instead so if I run it,

92
00:03:53,000 --> 00:03:56,000
I get two. 100 divided by 50 is two, so we're off to a good

93
00:03:56,000 --> 00:03:58,000
start here.

94
00:03:58,000 --> 00:04:00,000
Now we can make things a little better here.

95
00:04:00,000 --> 00:04:02,000
We can get this bottom window out of the way.

96
00:04:02,000 --> 00:04:05,000
Now when we have this bad opCode, just showing a result

97
00:04:05,000 --> 00:04:07,000
of zero could be confusing, right?

98
00:04:07,000 --> 00:04:09,000
So what we probably want to do is maybe put an error

99
00:04:09,000 --> 00:04:10,000
message here, right?

100
00:04:10,000 --> 00:04:12,000
So it's going to print out an error message that says,

101
00:04:12,000 --> 00:04:14,000
"Error invalid opCode".

102
00:04:14,000 --> 00:04:17,000
So now if we put in a bad value, it would actually just

103
00:04:17,000 --> 00:04:20,000
display our message and make sure something useful

104
00:04:20,000 --> 00:04:23,000
so I currently have a good value here, though.

105
00:04:23,000 --> 00:04:25,000
The opCode is d so that's still fine.

106
00:04:25,000 --> 00:04:29,000
Let's go ahead and run it and make sure everything's okay.

107
00:04:29,000 --> 00:04:32,000
And you'll notice that when I ran it now, I didn't get the

108
00:04:32,000 --> 00:04:35,000
proper answer, 2.0, I got zero, right.

109
00:04:35,000 --> 00:04:39,000
And that's because I need to make this a block statement

110
00:04:39,000 --> 00:04:42,000
with this else, because remember the else only ties to the

111
00:04:42,000 --> 00:04:43,000
one line here.

112
00:04:43,000 --> 00:04:46,000
So by actually adding this print statement here,

113
00:04:46,000 --> 00:04:49,000
I'm forcing it to always result to zero, no matter what's

114
00:04:49,000 --> 00:04:51,000
done before that.

115
00:04:51,000 --> 00:04:53,000
So I'm going to make this a block statement and now

116
00:04:53,000 --> 00:04:57,000
of course it'll do the right thing because it only sets

117
00:04:57,000 --> 00:05:01,000
result to zero if we're inside the else block.

118
00:05:01,000 --> 00:05:04,000
Of course now if I run it,

119
00:05:04,000 --> 00:05:08,000
I get my 2.0 displayed again.

120
00:05:08,000 --> 00:05:09,000
Okay, now one other thing.

121
00:05:09,000 --> 00:05:12,000
We're still exposed in our divide to a divide by zero.

122
00:05:12,000 --> 00:05:14,000
So a good programming practice of course is to always

123
00:05:14,000 --> 00:05:18,000
check to see if the bottom value, the divisor, is zero.

124
00:05:18,000 --> 00:05:22,000
So what I'm going to do here is say that if val2 is not

125
00:05:22,000 --> 00:05:27,000
equal to zero, then in that case I'll do the division.

126
00:05:27,000 --> 00:05:32,000
Otherwise, I want to set the result equal to zero.

127
00:05:32,000 --> 00:05:37,000
So now if I run it, leaving val2 as 50,

128
00:05:37,000 --> 00:05:44,000
it displays 2.0 but if I change val2 to be zero and run it,

129
00:05:44,000 --> 00:05:48,000
now I get the zero, so it's doing the right thing.

130
00:05:48,000 --> 00:05:51,000
Now one thing to note here is that in the if statement like

131
00:05:51,000 --> 00:05:53,000
this where you simply do a condition and then set a result

132
00:05:53,000 --> 00:05:58,000
to one thing or another, that's a great time to use that

133
00:05:58,000 --> 00:05:59,000
conditional assignment I do.

134
00:05:59,000 --> 00:06:02,000
So what I can do here is instead of that if else like that,

135
00:06:02,000 --> 00:06:08,000
I can simply say result equals val2 not equal to zero

136
00:06:08,000 --> 00:06:10,000
and if it's not equal to zero then go ahead and divide

137
00:06:10,000 --> 00:06:16,000
val1 by val2, otherwise return zero.

138
00:06:16,000 --> 00:06:21,000
So that one line replaces all of this.

139
00:06:21,000 --> 00:06:24,000
So I'm going to go ahead and comment that out.

140
00:06:24,000 --> 00:06:28,000
So now if I run it, it still runs correctly.

141
00:06:28,000 --> 00:06:30,000
It shows zero because val2 is zero.

142
00:06:30,000 --> 00:06:36,000
I change val2 back to 50, run it again.

143
00:06:36,000 --> 00:06:38,000
It's now 2.0 and one thing to note here is that

144
00:06:38,000 --> 00:06:42,000
it appears that we have multiple lines under this else if

145
00:06:42,000 --> 00:06:45,000
for opCode equals d, but remember that those last four lines

146
00:06:45,000 --> 00:06:48,000
are commented out, so it's still treated as if there's only

147
00:06:48,000 --> 00:06:51,000
one line under the else if, so we didn't need to make

148
00:06:51,000 --> 00:06:53,000
that a block statement but a situation like this where

149
00:06:53,000 --> 00:06:58,000
I've got code hanging around that can be confusing

150
00:06:58,000 --> 00:07:00,000
because it just makes it seem odd that I've got all

151
00:07:00,000 --> 00:07:02,000
these statements there and they all seem to apply to the

152
00:07:02,000 --> 00:07:05,000
else if, it's often useful to go ahead and use a block

153
00:07:05,000 --> 00:07:08,000
statement, just to make your code more readable.

154
00:07:08,000 --> 00:07:10,000
So what I'm going to do is put this in a block.

155
00:07:10,000 --> 00:07:11,000
Even though it's not necessary for the program to run

156
00:07:11,000 --> 00:59:00,000
correctly, it makes the program much more readable.

