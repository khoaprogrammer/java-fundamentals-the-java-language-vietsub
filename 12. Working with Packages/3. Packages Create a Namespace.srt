1
00:00:02,000 --> 00:00:05,000
As we mentioned, packages create a name space

2
00:00:05,000 --> 00:00:07,000
which is useful in avoiding naming collisions

3
00:00:07,000 --> 00:00:09,000
and that's because the package name

4
00:00:09,000 --> 00:00:12,000
becomes part of the type name.

5
00:00:12,000 --> 00:00:13,000
Looking at our flight class,

6
00:00:13,000 --> 00:00:15,000
the flight class is now part of that package

7
00:00:15,000 --> 00:00:16,000
and the package's name, again,

8
00:00:16,000 --> 00:00:19,000
is part of now the flight class's name.

9
00:00:19,000 --> 00:00:21,000
But now naming a package all X's

10
00:00:21,000 --> 00:00:22,000
is not going to be very useful

11
00:00:22,000 --> 00:00:24,000
in avoiding naming collisions.

12
00:00:24,000 --> 00:00:25,000
But you recall from Module two,

13
00:00:25,000 --> 00:00:28,000
we mentioned that we follow a convention

14
00:00:28,000 --> 00:00:31,000
in our package names that creates uniqueness

15
00:00:31,000 --> 00:00:35,000
and what we do is we use reverse domain naming.

16
00:00:35,000 --> 00:00:36,000
What that means is that if we take

17
00:00:36,000 --> 00:00:39,000
something like Pluralsight.com.

18
00:00:39,000 --> 00:00:41,000
Now Pluralsight has registered with an authority

19
00:00:41,000 --> 00:00:44,000
to have the rights to use the domain

20
00:00:44,000 --> 00:00:46,000
Pluralsight.com and no one else in the world

21
00:00:46,000 --> 00:00:49,000
has the rights to use that domain.

22
00:00:49,000 --> 00:00:51,000
So we make our package names a deviation

23
00:00:51,000 --> 00:00:55,000
of this registered domain, we now get uniqueness.

24
00:00:55,000 --> 00:00:57,000
Again, we do it in reverse order,

25
00:00:57,000 --> 00:00:59,000
so if we have a domain, Pluralsight.com,

26
00:00:59,000 --> 00:01:01,000
we take our package and we name it

27
00:01:01,000 --> 00:01:05,000
something starting with com.Pluralsight.

28
00:01:05,000 --> 00:01:06,000
If everyone follows that convention,

29
00:01:06,000 --> 00:01:08,000
we don't get naming collisions.

30
00:01:08,000 --> 00:01:11,000
Now we can further qualify the package name

31
00:01:11,000 --> 00:01:13,000
to be useful for whatever project we're working on.

32
00:01:13,000 --> 00:01:14,000
So for things like flights,

33
00:01:14,000 --> 00:01:17,000
maybe we'll put it into the travel package.

34
00:01:17,000 --> 00:01:19,000
So our flight class is now in the package

35
00:01:19,000 --> 00:01:23,000
com.Pluralsight.travel and the type name

36
00:01:23,000 --> 00:01:25,000
now includes the package name.

37
00:01:25,000 --> 00:01:27,000
Or we can say the package name is qualified

38
00:01:27,000 --> 00:01:29,000
by the package name.

39
00:01:29,000 --> 00:01:31,000
So if we go into code and we want

40
00:01:31,000 --> 00:01:32,000
to go ahead and use a class flight,

41
00:01:32,000 --> 00:01:35,000
there is no class named flight anymore.

42
00:01:35,000 --> 00:01:37,000
What there is a class named

43
00:01:37,000 --> 00:01:41,000
com.Pluralsight.travel.flight.

44
00:01:41,000 --> 00:01:43,000
And that fully qualified name now

45
00:01:43,000 --> 00:01:44,000
is unique throughout the world

46
00:01:44,000 --> 00:01:46,000
because of the conventions we follow.

47
00:01:46,000 --> 00:01:49,000
The classes name is fully qualified in all uses.

48
00:01:49,000 --> 00:01:51,000
Whether we're declaring a variable like this

49
00:01:51,000 --> 00:01:54,000
or if we're creating an instance of it.

50
00:01:54,000 --> 00:01:56,000
With the package name being part of the type name,

51
00:01:56,000 --> 00:01:59,000
that's really useful for avoiding naming collisions.

52
00:01:59,000 --> 00:02:02,000
Fully qualifying all of our type names

53
00:02:02,000 --> 00:02:04,000
like we have here, can be really cumbersome.

54
00:02:04,000 --> 00:02:06,000
We need a way to get the benefits

55
00:02:06,000 --> 00:02:09,000
of the package name being part of the type name

56
00:02:09,000 --> 00:02:12,000
without having to fully qualify it each and every time.

57
00:02:12,000 --> 00:59:00,000
That's what we'll take a look at in the next clip.

