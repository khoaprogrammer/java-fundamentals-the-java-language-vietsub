1
00:00:02,000 --> 00:00:03,000
As we've been working in different classes

2
00:00:03,000 --> 00:00:06,000
throughout this course, we've seen that a given class

3
00:00:06,000 --> 00:00:08,000
can have multiple constructors.

4
00:00:08,000 --> 00:00:10,000
And that same idea can be extended to methods.

5
00:00:10,000 --> 00:00:12,000
Where a class can have the same method name

6
00:00:12,000 --> 00:00:14,000
appear multiple times.

7
00:00:14,000 --> 00:00:16,000
And this is a concept called Overloading.

8
00:00:16,000 --> 00:00:19,000
The ability to use different parameter lists

9
00:00:19,000 --> 00:00:22,000
with a given method name or the constructor.

10
00:00:22,000 --> 00:00:24,000
Now, the system has to have some way of identifying

11
00:00:24,000 --> 00:00:27,000
what constructor or what method you want to use.

12
00:00:27,000 --> 00:00:29,000
And what it uses is a concept called a signature.

13
00:00:29,000 --> 00:00:31,000
It's that each constructor or method

14
00:00:31,000 --> 00:00:33,000
must have a unique signature.

15
00:00:33,000 --> 00:00:35,000
And the signature is made up of three parts.

16
00:00:35,000 --> 00:00:38,000
Now, one part is the number of parameters.

17
00:00:38,000 --> 00:00:41,000
And we saw this previously

18
00:00:41,000 --> 00:00:43,000
when we were working with our passenger class.

19
00:00:43,000 --> 00:00:45,000
Right, our passenger class had multiple constructors.

20
00:00:45,000 --> 00:00:49,000
The first constructor here has no parameters at all.

21
00:00:49,000 --> 00:00:52,000
We had another constructor that accepted the number

22
00:00:52,000 --> 00:00:55,000
of free bags, so that had just one parameter.

23
00:00:55,000 --> 00:00:57,000
And then we had another version of the constructor

24
00:00:57,000 --> 00:01:00,000
that accepted free bags and checked bags,

25
00:01:00,000 --> 00:01:02,000
so it had two parameters.

26
00:01:02,000 --> 00:01:04,000
So the system was able to figure out which constructor

27
00:01:04,000 --> 00:01:07,000
we wanted to use, based on the number of parameters

28
00:01:07,000 --> 00:01:09,000
we passed to the constructor.

29
00:01:09,000 --> 00:01:12,000
Now, we're not limited to just the number of parameters.

30
00:01:12,000 --> 00:01:13,000
The signature is also affected

31
00:01:13,000 --> 00:01:15,000
by the type of each parameter.

32
00:01:15,000 --> 00:01:17,000
And we got to see this earlier

33
00:01:17,000 --> 00:01:19,000
when we were working our flight class.

34
00:01:19,000 --> 00:01:20,000
And our flight class had, again,

35
00:01:20,000 --> 00:01:22,000
a constructor that took no parameters.

36
00:01:22,000 --> 00:01:25,000
A constructor that took just the flight number,

37
00:01:25,000 --> 00:01:27,000
so that was an integer parameter, but only one parameter.

38
00:01:27,000 --> 00:01:31,000
And another constructor that also has only one parameter,

39
00:01:31,000 --> 00:01:34,000
but this was a char for the flight class.

40
00:01:34,000 --> 00:01:36,000
So, it's not just the number of the parameters,

41
00:01:36,000 --> 00:01:38,000
but also the type of the parameters.

42
00:01:38,000 --> 00:01:42,000
And the final part to identifying the signature is the name.

43
00:01:42,000 --> 00:01:45,000
Now, when it comes to constructors,

44
00:01:45,000 --> 00:01:47,000
the name doesn't really matter so much,

45
00:01:47,000 --> 00:01:50,000
because it always has to match the class name.

46
00:01:50,000 --> 00:01:52,000
But, when it comes to methods,

47
00:01:52,000 --> 00:01:54,000
the name is actually a really important part of that,

48
00:01:54,000 --> 00:01:56,000
because a given class can have multiple methods,

49
00:01:56,000 --> 00:01:58,000
each with their own unique name.

50
00:01:58,000 --> 00:02:00,000
But that one method name can also have different

51
00:02:00,000 --> 00:02:03,000
numbers of parameters and parameters of varying types.

52
00:02:03,000 --> 00:59:00,000
And we'll see some examples of that in our next clip.

