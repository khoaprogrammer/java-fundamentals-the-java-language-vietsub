1
00:00:01,000 --> 00:00:04,000
As we've seen, overloading allows us to pass

2
00:00:04,000 --> 00:00:08,000
differing parameter lists to a particular method name.

3
00:00:08,000 --> 00:00:11,000
But what happens if we don't know exactly

4
00:00:11,000 --> 00:00:13,000
how many parameters we need to handle in a method?

5
00:00:13,000 --> 00:00:15,000
Let's take a look here at our Flight class.

6
00:00:15,000 --> 00:00:19,000
Now, up until now, whenever we wanted to add passengers

7
00:00:19,000 --> 00:00:21,000
to a flight, we always had to add them one at a time.

8
00:00:21,000 --> 00:00:24,000
But what if we wanted to add a method called Add Passengers

9
00:00:24,000 --> 00:00:27,000
that accepted however many passengers

10
00:00:27,000 --> 00:00:29,000
we needed to add at a time.

11
00:00:29,000 --> 00:00:30,000
It could be one passenger,

12
00:00:30,000 --> 00:00:31,000
it could be two, it could be five.

13
00:00:31,000 --> 00:00:33,000
Well it seems that the most logical way

14
00:00:33,000 --> 00:00:34,000
to handle that is an array.

15
00:00:34,000 --> 00:00:36,000
So we'll go ahead and have our Add Passengers

16
00:00:36,000 --> 00:00:38,000
method accept an array of passenger.

17
00:00:38,000 --> 00:00:40,000
One thing we'll need to do is an extra helper method here.

18
00:00:40,000 --> 00:00:42,000
Up until now, we've only had to check

19
00:00:42,000 --> 00:00:44,000
whether one more passenger could be added.

20
00:00:44,000 --> 00:00:45,000
Now we need to check and see if multiple

21
00:00:45,000 --> 00:00:47,000
passengers can be added.

22
00:00:47,000 --> 00:00:48,000
So, we'll create our own private overload

23
00:00:48,000 --> 00:00:50,000
of Has Seating that now accepts a count.

24
00:00:50,000 --> 00:00:53,000
And all it'll do is just make sure that there's room

25
00:00:53,000 --> 00:00:55,000
to add that many more passengers.

26
00:00:55,000 --> 00:00:57,000
So the first thing we'll do in our Add Passengers

27
00:00:57,000 --> 00:01:00,000
method is just call Has Seating, passing in the link

28
00:01:00,000 --> 00:01:02,000
to that array containing the passengers.

29
00:01:02,000 --> 00:01:05,000
So all we'll do inside of here is that we'll increase

30
00:01:05,000 --> 00:01:07,000
the number of passengers on the flight

31
00:01:07,000 --> 00:01:09,000
by the length of that array.

32
00:01:09,000 --> 00:01:11,000
And then we'll just go ahead and loop through the array.

33
00:01:11,000 --> 00:01:14,000
Adding up to check bags for each passenger,

34
00:01:14,000 --> 00:01:16,000
so we have that complete list.

35
00:01:16,000 --> 00:01:17,000
Of course, if there wasn't room, we'll

36
00:01:17,000 --> 00:01:19,000
go ahead and just handle that.

37
00:01:19,000 --> 00:01:21,000
So, now what's it like to call this method Add Passengers?

38
00:01:21,000 --> 00:01:23,000
So we'll set up a code here and we create a flight.

39
00:01:23,000 --> 00:01:26,000
Let's say we create Janet who is a passenger

40
00:01:26,000 --> 00:01:28,000
that has one checked bag.

41
00:01:28,000 --> 00:01:31,000
And we have John who's a passenger with two checked bags.

42
00:01:31,000 --> 00:01:33,000
I'm going to go ahead and add them together.

43
00:01:33,000 --> 00:01:35,000
So, we'll call our Flight, Add Passengers,

44
00:01:35,000 --> 00:01:38,000
but we now have to package Janet and John up into an array.

45
00:01:38,000 --> 00:01:40,000
So we have add the code where we actually create

46
00:01:40,000 --> 00:01:43,000
a new passenger array and initialize it with Janet and John.

47
00:01:43,000 --> 00:01:46,000
Not a horrible thing, but notice if you look,

48
00:01:46,000 --> 00:01:48,000
we've actually typed more characters to create the array

49
00:01:48,000 --> 00:01:50,000
than we did to actually name the two parameters,

50
00:01:50,000 --> 00:01:52,000
Janet and John.

51
00:01:52,000 --> 00:01:54,000
And if that carries on, let's say now we want

52
00:01:54,000 --> 00:01:56,000
to add a family of three people.

53
00:01:56,000 --> 00:01:58,000
Fred, Sarah and their daughter Susie.

54
00:01:58,000 --> 00:02:00,000
Well, again we got to call Add Passengers.

55
00:02:00,000 --> 00:02:02,000
And then again explicitly create an array

56
00:02:02,000 --> 00:02:04,000
containing Fred, Sarah and Susie.

57
00:02:04,000 --> 00:02:07,000
It would be nice if we could simply just list

58
00:02:07,000 --> 00:02:09,000
each of the passengers we want to add.

59
00:02:09,000 --> 00:02:12,000
And it turns out that we can actually do that.

60
00:02:12,000 --> 00:02:14,000
Methods can be declared to accept

61
00:02:14,000 --> 00:02:17,000
a varying number of parameter values.

62
00:02:17,000 --> 00:02:19,000
And doing it's actually quite easy.

63
00:02:19,000 --> 00:02:22,000
All we have to do, is when we declare the parameter,

64
00:02:22,000 --> 00:02:24,000
just put an ellipse after the type.

65
00:02:24,000 --> 00:02:26,000
So, you see here where we have Passenger as an array,

66
00:02:26,000 --> 00:02:29,000
if we change that, so now we have Passenger

67
00:02:29,000 --> 00:02:33,000
dot dot dot, alright, the ellipse, that now says that list

68
00:02:33,000 --> 00:02:36,000
will be a varying number of passenger references.

69
00:02:36,000 --> 00:02:39,000
One thing to note is that when we use this ellipse notation,

70
00:02:39,000 --> 00:02:42,000
it can only be used on the last parameter for a method.

71
00:02:42,000 --> 00:02:45,000
Now, in our case, our method only has one parameter.

72
00:02:45,000 --> 00:02:47,000
But if we had other parameters we wanted to accept

73
00:02:47,000 --> 00:02:49,000
besides this list of passengers, they'd all have to

74
00:02:49,000 --> 00:02:52,000
occur before the list of passengers.

75
00:02:52,000 --> 00:02:54,000
Now, here's what's really neat though.

76
00:02:54,000 --> 00:02:56,000
Is that ellipse notation,

77
00:02:56,000 --> 00:02:58,000
you're actually still receiving an array.

78
00:02:58,000 --> 00:03:01,000
So all the code that we wrote

79
00:03:01,000 --> 00:03:02,000
to handle the array,

80
00:03:02,000 --> 00:03:04,000
stays in place.

81
00:03:04,000 --> 00:03:06,000
We don't have to change any code in this method.

82
00:03:06,000 --> 00:03:07,000
The value comes in is that it actually

83
00:03:07,000 --> 00:03:10,000
simplifies calling the method.

84
00:03:10,000 --> 00:03:12,000
So, if we take a look at that code we created to call

85
00:03:12,000 --> 00:03:15,000
in to Add Passengers, the code as we have it written

86
00:03:15,000 --> 00:03:17,000
right now would actually still work.

87
00:03:17,000 --> 00:03:20,000
Because the variable number of parameters are actually

88
00:03:20,000 --> 00:03:22,000
handled as an array inside the method,

89
00:03:22,000 --> 00:03:25,000
we can pass them to the method as an array.

90
00:03:25,000 --> 00:03:27,000
But that's not where the value comes in.

91
00:03:27,000 --> 00:03:29,000
If we take a look at the first call to Add Passengers

92
00:03:29,000 --> 00:03:32,000
with Janet and John, we can actually replace their array

93
00:03:32,000 --> 00:03:36,000
creation with simply passing Janet and John.

94
00:03:36,000 --> 00:03:39,000
And what'll happen is that Java will

95
00:03:39,000 --> 00:03:42,000
take care of creating that array for us.

96
00:03:42,000 --> 00:03:45,000
So, the same thing where we call for Fred, Sarah and Susie,

97
00:03:45,000 --> 00:03:48,000
we can simply pass in Fred, Sarah and Susie.

98
00:03:48,000 --> 00:03:52,000
So this now gives us that flexibility of handling an array

99
00:03:52,000 --> 00:03:55,000
inside the method which allows us to handle anywhere from

100
00:03:55,000 --> 00:03:57,000
zero or more passenger references.

101
00:03:57,000 --> 00:03:59,000
While still having the convenience of calling it by simply

102
00:03:59,000 --> 00:59:00,000
listing the values we want to send to the method.

