1
00:00:02,000 --> 00:00:03,000
Let's take a look at the issue

2
00:00:03,000 --> 00:00:05,000
of comparing strings for equality.

3
00:00:05,000 --> 00:00:07,000
Let's say I have a string, I'll call s1.

4
00:00:07,000 --> 00:00:10,000
And I assign it the value, I space love.

5
00:00:10,000 --> 00:00:14,000
Then I add on space Java to the end of that.

6
00:00:14,000 --> 00:00:17,000
I have another string called s2

7
00:00:17,000 --> 00:00:19,000
and I set it to the value of I

8
00:00:19,000 --> 00:00:22,000
and I add on space love space Java.

9
00:00:22,000 --> 00:00:25,000
So now we have two strings, s1 and s2,

10
00:00:25,000 --> 00:00:27,000
and both of them have the value

11
00:00:27,000 --> 00:00:30,000
I space love space Java.

12
00:00:30,000 --> 00:00:32,000
So now if I compare them for equality,

13
00:00:32,000 --> 00:00:35,000
using the equal equals operator, what I'll get is

14
00:00:35,000 --> 00:00:36,000
false.

15
00:00:36,000 --> 00:00:38,000
And let's see why that's the case.

16
00:00:38,000 --> 00:00:40,000
So, if I look at s1,

17
00:00:40,000 --> 00:00:44,000
it contains the value, as we said, I space love space Java.

18
00:00:44,000 --> 00:00:47,000
And of course the variable s1 references that.

19
00:00:47,000 --> 00:00:50,000
And we look at s2, what it also has,

20
00:00:50,000 --> 00:00:52,000
I space love space Java.

21
00:00:52,000 --> 00:00:55,000
And s2 references that.

22
00:00:55,000 --> 00:00:57,000
But, remember that the equals equals operator

23
00:00:57,000 --> 00:01:00,000
compares values based on whether they both

24
00:01:00,000 --> 00:01:03,000
point to the exact same object instance.

25
00:01:03,000 --> 00:01:04,000
And what we see here is that,

26
00:01:04,000 --> 00:01:08,000
s1 points to one instance and s2 points to another.

27
00:01:08,000 --> 00:01:11,000
So, they're not equals by the definition

28
00:01:11,000 --> 00:01:13,000
of the equal equals operator

29
00:01:13,000 --> 00:01:15,000
because they don't point to the same object instance.

30
00:01:15,000 --> 00:01:18,000
And that's where the equals method comes in.

31
00:01:18,000 --> 00:01:21,000
The equals method does a

32
00:01:21,000 --> 00:01:23,000
character by character comparison.

33
00:01:23,000 --> 00:01:26,000
So, as long as the character by character comparison

34
00:01:26,000 --> 00:01:28,000
of the two values matches,

35
00:01:28,000 --> 00:01:31,000
then in that case, we get true.

36
00:01:31,000 --> 00:01:35,000
So, in most scenarios, of comparing strings for equality,

37
00:01:35,000 --> 00:01:39,000
we're going to use the equals method.

38
00:01:39,000 --> 00:01:41,000
Now something to consider though is that

39
00:01:41,000 --> 00:01:45,000
reference based comparisons are actually quite inexpensive.

40
00:01:45,000 --> 00:01:47,000
Whereas character by character comparisons

41
00:01:47,000 --> 00:01:49,000
can be very expensive,

42
00:01:49,000 --> 00:01:51,000
particularly in very long strings.

43
00:01:51,000 --> 00:01:53,000
So it would be nice if we had situations

44
00:01:53,000 --> 00:01:56,000
where we're going to do a lot of comparisons

45
00:01:56,000 --> 00:01:58,000
for a particular string value,

46
00:01:58,000 --> 00:02:00,000
it might be nice to take advantage of that

47
00:02:00,000 --> 00:02:04,000
inexpensive nature of reference based comparisons.

48
00:02:04,000 --> 00:02:07,000
And that's where the intern method comes in.

49
00:02:07,000 --> 00:02:10,000
The intern method gives us back

50
00:02:10,000 --> 00:02:12,000
a canonicalized reference

51
00:02:12,000 --> 00:02:13,000
of a string value.

52
00:02:13,000 --> 00:02:15,000
And let's see what that means.

53
00:02:15,000 --> 00:02:18,000
So, let's say I declare another string variable, s3

54
00:02:18,000 --> 00:02:22,000
and I assign it the value s1.intern.

55
00:02:22,000 --> 00:02:25,000
Again, intern returns back a canonicalized value

56
00:02:25,000 --> 00:02:27,000
and that's a fancy way of saying,

57
00:02:27,000 --> 00:02:30,000
when you call the intern method on a string value,

58
00:02:30,000 --> 00:02:32,000
it will always return back

59
00:02:32,000 --> 00:02:35,000
the same exact string object

60
00:02:35,000 --> 00:02:37,000
for a given string value.

61
00:02:37,000 --> 00:02:39,000
So when we call s1.intern,

62
00:02:39,000 --> 00:02:42,000
we get back the canonicalized reference

63
00:02:42,000 --> 00:02:45,000
to I space love space Java.

64
00:02:45,000 --> 00:02:48,000
s3 gets assigned a reference to that.

65
00:02:48,000 --> 00:02:50,000
So now, if I say,

66
00:02:50,000 --> 00:02:53,000
string s4 equals s2.intern,

67
00:02:53,000 --> 00:02:56,000
s4 will get a reference to that

68
00:02:56,000 --> 00:02:58,000
exact same object instance.

69
00:02:58,000 --> 00:03:02,000
So, the intern assures that two strings with the same value,

70
00:03:02,000 --> 00:03:06,000
will reference the exact same object.

71
00:03:06,000 --> 00:03:07,000
What that allows us to do then

72
00:03:07,000 --> 00:03:11,000
is use that very inexpensive equals equals operator

73
00:03:11,000 --> 00:03:13,000
to do the comparison.

74
00:03:13,000 --> 00:03:17,000
So, s3 equals equals s4 returns true.

75
00:03:17,000 --> 00:03:20,000
As you might expect, there is a bit of overhead

76
00:03:20,000 --> 00:03:22,000
to interning a string.

77
00:03:22,000 --> 00:03:24,000
So, in general, when you're doing a series

78
00:03:24,000 --> 00:03:26,000
of one-off comparisons of strings,

79
00:03:26,000 --> 00:03:29,000
you'll use the equals method to do that.

80
00:03:29,000 --> 00:03:31,000
But, when you have situations where you expect

81
00:03:31,000 --> 00:03:35,000
to do a lot of comparisons to a given set of string values,

82
00:03:35,000 --> 00:03:37,000
that's where the intern method comes in.

83
00:03:37,000 --> 00:03:40,000
You'll often intern a series of string values

84
00:03:40,000 --> 00:03:42,000
you expect to search over and over again

85
00:03:42,000 --> 00:03:45,000
and put those into an array or some other collection

86
00:03:45,000 --> 00:03:47,000
and then as you search that collection,

87
00:03:47,000 --> 00:03:49,000
you'll then intern the incoming values

88
00:03:49,000 --> 00:03:52,000
and use that very inexpensive equal equals operator

89
00:03:52,000 --> 00:03:54,000
to see if you can find the value

90
00:03:54,000 --> 00:59:00,000
in that array or collection of intern string values.

