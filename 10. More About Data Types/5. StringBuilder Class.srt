1
00:00:02,000 --> 00:00:04,000
As we've talked about, strings are immutable.

2
00:00:04,000 --> 00:00:07,000
And that means that any modification to a string

3
00:00:07,000 --> 00:00:09,000
results in the creation of a new string.

4
00:00:09,000 --> 00:00:11,000
And that's just not efficient.

5
00:00:11,000 --> 00:00:12,000
But there are, of course, times

6
00:00:12,000 --> 00:00:13,000
that we need to be able to efficiently

7
00:00:13,000 --> 00:00:15,000
manipulate strings.

8
00:00:15,000 --> 00:00:17,000
And that's where StringBuilder comes in.

9
00:00:17,000 --> 00:00:20,000
StringBuilder provides us with a mutable string buffer,

10
00:00:20,000 --> 00:00:24,000
providing us with an efficient way to manipulate strings.

11
00:00:24,000 --> 00:00:25,000
Now although you don't have to,

12
00:00:25,000 --> 00:00:27,000
when you create a StringBuilder instance,

13
00:00:27,000 --> 00:00:31,000
you'll get the best performance if you pre-size the buffer.

14
00:00:31,000 --> 00:00:32,000
Let's look at some code here.

15
00:00:32,000 --> 00:00:36,000
I declare StringBuilder sb, say new StringBuilder 40.

16
00:00:36,000 --> 00:00:39,000
Well that allocates out an instance of StringBuilder

17
00:00:39,000 --> 00:00:42,000
that has room for 40 characters inside of it.

18
00:00:42,000 --> 00:00:43,000
In fact, if we were to call the

19
00:00:43,000 --> 00:00:46,000
sb.capacity method on that instance,

20
00:00:46,000 --> 00:00:48,000
we'll get back the value 40.

21
00:00:48,000 --> 00:00:51,000
Now the StringBuilder will grow automatically

22
00:00:51,000 --> 00:00:53,000
if you exceed the capacity,

23
00:00:53,000 --> 00:00:55,000
but you want to minimize how often that happens

24
00:00:55,000 --> 00:00:57,000
because there's a fair bit of overhead

25
00:00:57,000 --> 00:01:00,000
each time the system has to grow a StringBuilder instance.

26
00:01:00,000 --> 00:01:03,000
StringBuilder has a number of methods available,

27
00:01:03,000 --> 00:01:06,000
but the ones we use most commonly are append,

28
00:01:06,000 --> 00:01:07,000
which lets us add new content

29
00:01:07,000 --> 00:01:09,000
to the end of the StringBuilder,

30
00:01:09,000 --> 00:01:11,000
or insert, which gives us the ability to add new content

31
00:01:11,000 --> 00:01:13,000
within the body of the StringBuilder.

32
00:01:13,000 --> 00:01:14,000
So, let's look at some code.

33
00:01:14,000 --> 00:01:16,000
So, we have our flight we've been using here.

34
00:01:16,000 --> 00:01:18,000
We have flight number 175.

35
00:01:18,000 --> 00:01:20,000
And we'll have a string called location

36
00:01:20,000 --> 00:01:21,000
with the value of Florida in it.

37
00:01:21,000 --> 00:01:23,000
Let's say we want to build up a message.

38
00:01:23,000 --> 00:01:24,000
So we want to go ahead and say,

39
00:01:24,000 --> 00:01:28,000
sb.append I flew to space,

40
00:01:28,000 --> 00:01:29,000
well that adds to the end of the StringBuilder.

41
00:01:29,000 --> 00:01:31,000
The StringBuilder is empty.

42
00:01:31,000 --> 00:01:32,000
That adds it to the beginning.

43
00:01:32,000 --> 00:01:35,000
So then we say, sb.append location,

44
00:01:35,000 --> 00:01:37,000
takes the value of location Florida,

45
00:01:37,000 --> 00:01:39,000
adds that on to the end.

46
00:01:39,000 --> 00:01:41,000
Literal string space on space,

47
00:01:41,000 --> 00:01:43,000
that gets added on to the end.

48
00:01:43,000 --> 00:01:46,000
Then we say sb.append myflight.

49
00:01:46,000 --> 00:01:48,000
Well, myflight is a class, so we'll

50
00:01:48,000 --> 00:01:49,000
go ahead and call toString on it.

51
00:01:49,000 --> 00:01:52,000
So we get, flight #175.

52
00:01:52,000 --> 00:01:55,000
So we've been able to build these four values together,

53
00:01:55,000 --> 00:01:57,000
doing it all in a single buffer.

54
00:01:57,000 --> 00:01:59,000
But let's say we come along a little further in our program

55
00:01:59,000 --> 00:02:02,000
and we realize that we actually have access to the time

56
00:02:02,000 --> 00:02:03,000
of this flight as well.

57
00:02:03,000 --> 00:02:06,000
We want to go ahead and add that into the message,

58
00:02:06,000 --> 00:02:07,000
but we want to put it somewhere

59
00:02:07,000 --> 00:02:08,000
into the body of the message.

60
00:02:08,000 --> 00:02:10,000
Let's say we want to do it just before the space

61
00:02:10,000 --> 00:02:12,000
in the word on.

62
00:02:12,000 --> 00:02:14,000
Now, since we know how many characters

63
00:02:14,000 --> 00:02:16,000
we've written into this buffer from the beginning,

64
00:02:16,000 --> 00:02:18,000
we could just count how many characters it takes

65
00:02:18,000 --> 00:02:19,000
to move over to get there.

66
00:02:19,000 --> 00:02:21,000
But, let's say we didn't know that.

67
00:02:21,000 --> 00:02:23,000
Let's say that all we knew is that

68
00:02:23,000 --> 00:02:25,000
we've added content inside of here

69
00:02:25,000 --> 00:02:26,000
and we've added the word on

70
00:02:26,000 --> 00:02:28,000
and then the information from our flight class.

71
00:02:28,000 --> 00:02:30,000
And we want to calculate where the insert point is

72
00:02:30,000 --> 00:02:32,000
going backwards.

73
00:02:32,000 --> 00:02:33,000
So, from the end of the current values.

74
00:02:33,000 --> 00:02:35,000
Let's see how we would do that.

75
00:02:35,000 --> 00:02:37,000
So, I'm going to declare a variable position

76
00:02:37,000 --> 00:02:40,000
and I'm just going to say sb.length

77
00:02:40,000 --> 00:02:42,000
and that tells me how many characters are currently

78
00:02:42,000 --> 00:02:44,000
in this StringBuilder instance.

79
00:02:44,000 --> 00:02:48,000
Remember, capacity said how much space is allocated,

80
00:02:48,000 --> 00:02:50,000
length says how much is in use.

81
00:02:50,000 --> 00:02:52,000
And we'll say that we want to go back to length

82
00:02:52,000 --> 00:02:54,000
of that literal on.

83
00:02:54,000 --> 00:02:57,000
Now, honestly I could've use the integer value four here,

84
00:02:57,000 --> 00:02:59,000
but I just wanted to show you that we can call string

85
00:02:59,000 --> 00:03:01,000
methods on string literals.

86
00:03:01,000 --> 00:03:04,000
And then we'll use our myflight toString.length.

87
00:03:04,000 --> 00:03:08,000
All right, so that now tells us how far back we have to go

88
00:03:08,000 --> 00:03:12,000
to get before that space before the word on.

89
00:03:12,000 --> 00:03:16,000
So now with that, I can now say something like sb.insert.

90
00:03:16,000 --> 00:03:18,000
Give it the position and then what I want to insert,

91
00:03:18,000 --> 00:03:21,000
which is space at space.

92
00:03:21,000 --> 00:03:25,000
What StringBuilder will do is move over that on flight #175

93
00:03:25,000 --> 00:03:28,000
and then write the at in there.

94
00:03:28,000 --> 00:03:32,000
And then if I say, sb.insert position plus four,

95
00:03:32,000 --> 00:03:34,000
and I'm going to add the value of time in.

96
00:03:34,000 --> 00:03:35,000
Right, the position plus four is just I want to get

97
00:03:35,000 --> 00:03:37,000
past that space at space,

98
00:03:37,000 --> 00:03:39,000
move to time as an integer,

99
00:03:39,000 --> 00:03:41,000
but insert will take care of doing that conversion.

100
00:03:41,000 --> 00:03:45,000
So now it'll move over the on flight #175

101
00:03:45,000 --> 00:03:46,000
and write that nine in there.

102
00:03:46,000 --> 00:03:49,000
So now we've got our content built exactly as we want it,

103
00:03:49,000 --> 00:03:51,000
but it's not quite a string yet.

104
00:03:51,000 --> 00:03:53,000
The way we get the string out

105
00:03:53,000 --> 00:03:55,000
is the way we get the string out of any other class.

106
00:03:55,000 --> 00:03:57,000
We simply call the toString method.

107
00:03:57,000 --> 00:03:59,000
So, inside of here, if we say

108
00:03:59,000 --> 00:04:02,000
string message equals sb.toString,

109
00:04:02,000 --> 00:04:05,000
the message we'll then get, the actual string

110
00:04:05,000 --> 00:04:08,000
I flew to Florida at 9 on Flight #175.

111
00:04:08,000 --> 00:04:11,000
So StringBuilder gives us a really efficient way of building

112
00:04:11,000 --> 00:59:00,000
and manipulating strings.

